<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年总结</title>
      <link href="/2024-nian-zong-jie.html"/>
      <url>/2024-nian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024年年度总结"><a href="#2024年年度总结" class="headerlink" title="2024年年度总结"></a>2024年年度总结</h1><p>拖拉成瘾，不到最后时刻不做。从23年的年度总结就可以看出来这个问题，正常春节假期前需要完成的2024年年度总结，一直在春节回来2周了才动笔开始写。今天是2025年2月16号，早上被冻着鼻塞难受，加上可能甲流病毒的影响，嗓子也倍感不适。于是在挣扎不知道多久后就直接起床了，打开电脑差不多4点40分，现在刚好是8点。一转眼半天的时间就过去了。想起来《认知觉醒》里面说过，早起带来的能量，想想从4点起来的话，每天真的多出来了一个半天时间，如果坚持一年就相当于别人多出来半年的时间，这个很有吸引力。刚好从2024年12月份开始持续到现在，感觉自己又陷入了迷茫，缺失目标感的状态中了，然后就会焦虑自责，然后继续保持现状，然后再焦虑，在自己的恶性循环中反复徘徊。今天这个总结，除了对2024年刻一点痕迹外，还算是正式的2025年规划思考。不断修正自己，让自己逐步聚焦，然后专注的去达成一个个自己定下的目标，让自己目标感清晰，消除自己虚度光阴的自责和焦虑感。</p><p>过去的2024年，曾经对自己的最大目标就是希望可以通过高级职称的评审。可是年初的消息还是让我很失望（2023年递交，然后2024年年初出的结果），也是备受了打击，毕竟一起申报的同事都是通过了，心理还是有一些不服气的。在2024年的申报规则里，要求更为严格，规则也改了，困难也更大，再次申请的过程很痛苦，几次犹豫想要放弃，最好还是咬牙认真准备，撰写了材料，在提交截止日期完成了申报提交。幸运的是这一次我通过了。在机会面前，每个人都是平等的，而能把握住机会的人，都是有准备的人。<br>过去的2024年，是希望自己成长的一年，拿到了高级职称，拿到了E类人才，收了房，对个人对家庭都是里程碑式的一年。瑕疵的是软考甚至都没有勇气去参加考试。<br>在2024年里，总跑步392公里，每个月都有保持，也完成了减脂，在27天里面从18%体脂下降到11.23%体脂，也成功赢得体脂大赛一等奖。完成了减肥减脂，效果明显，精力也变的更为充沛。虽然春节一过，回到解放前。经验可以总结，5+1或者5+2的轻断食，过晚上7点不吃东西，保持运动等等。一个只有能掌控自己本身的人，才有可能掌控自己的人生。我们一直抱怨生活的不公平，抱怨每天的忙碌，抱怨不知道自己做了什么收获了什么，迷茫混沌的状态占据大量的心智带宽，白白浪费大量的时间和精力。<br>在2024年阅读  590个小时，读过126本书，读完107本书。第四季度主要看人物传记类，然后也是自己偷懒，慢慢的都没有写读后感，一味的输入，但是没有输出，会导致印象不够深刻。相当于只是“看起来很努力”，或者说这个只是微习惯中迈出去的第一步，阅读最大的目的是要让自己有收获，最好是有行动，影响自己思考、工作、生活学习的才是有用的。经管类的书比较有启发。《冯唐成事心法》、《反败为胜的法则》、《百万富翁快车道》、《重来》、《商业至简》都是值得反复阅读的。时间是最为宝贵的东西，一切商业法则、工作里面很少有人直截了当的告诉我们，我们付出的时间是最大的成本。我们追求数字上的规模，追求薪资和成长，但是我们没有计算到我们是出卖的自己的时间，当然也包括一部分健康。确切的说出卖健康就是出卖了自己的时间，活到100岁和活到80岁，相差了20年，20年的风云变换，谁主沉浮又谁能说的定呢。现在也没有多少公司和企业可以坚持20年。希望自己可以明白这个道理，虽然现阶段我无力改变这一切，可能一段时间内还是会维持现在上班打工加班的轨迹。但是需要意识到时间的重要，提高效率弄工作，然后给自己和家庭划分出更多的时间，用来投资未来，投资希望得到的财富自由。所以GTD时间管理很重要，要逐步践行自己的原则，利用团队的力量去创造更大的价值，手上的团队是最好的资源，每天保持反思和时间记录，让投入专注到目标身上。<br>在2024年外出旅游2次，3月份自驾到了扬州，在老婆精心制作的游玩攻略下。喝了扬大酸奶，游了瘦西湖，逛了大运河博物馆，也让女儿记住了“烟花三月下扬州”。也去了长沙，女儿第一次做卧铺火车，很开心，也记住了毛主席的《沁园春 长沙》，在杭州也逛了极地海洋世界和野生动物园。<br>2024年女儿好像长大了不少，看着各种生活技能，信手拈来，为她感到骄傲，也觉得更近应该给他更多陪伴。工作不应该是没有时间陪伴的接口和理由，工作的目标是为了更好的生活，更好的陪伴家人，不应该本末倒置。小家伙在推理能力上有一些天赋，可以比较好的找到规律，需要多给她进行数字数学方面的知识熏陶。</p><p>在新的2025年里面，首要目标需要尽快研究装修，然后尽早的入住。个人管理方面，恢复和坚持日记，在阅读和运动上实现自我监督。工作方面，需要多输出专利，以副业的想法来完成和进行专利撰写。</p><p>总结下,<br>2024年，个人方面收获了E类人才、高级职称，减肥减脂成功，保持了运动和阅读；家庭方面房子交付了，崭新的小区让我们很开心；亲子关系方面，带女儿自驾游了扬州，卧铺游了长沙，野生动物园，极地海洋世界也都玩了，周六少年宫的课程也参与进去，但是陪伴时间还是不够，对女儿的耐心也不足，发火大喊大叫的时候也常有。<br>2025年，需要持续撰写专利输出，功利的角度可以薅公司的羊毛，每一篇提交专利至少有3800块大洋每篇，通过的专利一共可以拿到8000块每篇，这个是收益率极高的投资。与其花时间弄副业弄自媒体，现阶段最理想的副业就是持续撰写专利并输出。月均2篇专利的规划持续了2年一直完不成，今年希望可以持续输出，先达到月均一篇的目标再说。在阅读方面输入的同时，需要最好输出，看完的每一本书都需要写读后感，不要钱字数，但是需要记录自己的想法。恢复每天日记，每天进行反思和日程记录，增加自己的目标感，让自己持续的成事。多陪伴女儿，除了带她去上课，每周至少一天下班就回家陪伴。最后，25年对个人对家庭最重要的一件事就是弄好装修，尽快入住新房子。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客访问异常问题</title>
      <link href="/bo-ke-fang-wen-yi-chang-wen-ti.html"/>
      <url>/bo-ke-fang-wen-yi-chang-wen-ti.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客访问异常问题"><a href="#个人博客访问异常问题" class="headerlink" title="个人博客访问异常问题"></a>个人博客访问异常问题</h1><p>[[202402081311]]</p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="博客更新后网站没有更新"><a href="#博客更新后网站没有更新" class="headerlink" title="博客更新后网站没有更新"></a>博客更新后网站没有更新</h3><p>为什么博客更新后，访问的还是老的页面？<br>主要是设置了腾讯云的 域名管理  里面配置了CDN（ <a href="https://console.cloud.tencent.com/cdn/domains/cdn-jubyxda2" target="_blank" rel="noopener">https://console.cloud.tencent.com/cdn/domains/cdn-jubyxda2</a> ），而且主站配置的是<code>coding</code>的，很坑的是停止维护了，然后统一都切换到<code>serverless</code> 里面，<br><a href="https://console.cloud.tencent.com/sls" target="_blank" rel="noopener">https://console.cloud.tencent.com/sls</a></p><p>也就是通过我域名访问的，实际都是访问的这个应用，所以只要有访问就需要花钱。</p><h3 id="直接访问github的page域名会调整到自己域名"><a href="#直接访问github的page域名会调整到自己域名" class="headerlink" title="直接访问github的page域名会调整到自己域名"></a>直接访问github的page域名会调整到自己域名</h3><p>为什么解析关闭掉了，直接访问<code>lmwings.github.io</code>也会跳转到<code>www.lmwings.top</code>?<br>因为在仓库目录下存在一个<code>CNAME</code>文件，里面写了域名，如果要彻底解绑开，需要把这个文件内容写为空即可</p><h3 id="github的Action更新出错"><a href="#github的Action更新出错" class="headerlink" title="github的Action更新出错"></a>github的Action更新出错</h3><p>主要是提交到gitee的参考出错，后续可以重新申请一个token试试。</p><h2 id="改进措施"><a href="#改进措施" class="headerlink" title="改进措施"></a>改进措施</h2><p>（1）全部取消腾讯云的serverless的应用，以及暂停cdn的解析<br>（2）个人域名解析的默认访问区域，解析到<code>lmwings.github.io</code>中<br>（3）缺点是 国内访问速度会比较慢一些。因为国内比较稳定好用，又能自动同步更新的，有免费的还没有找到。等后续尝试做国外国内双链的部署。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运营维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩客云刷Armbian系统</title>
      <link href="/wan-ke-yun-shua-armbian-xi-tong.html"/>
      <url>/wan-ke-yun-shua-armbian-xi-tong.html</url>
      
        <content type="html"><![CDATA[<h1 id="玩客云刷Armbian系统"><a href="#玩客云刷Armbian系统" class="headerlink" title="玩客云刷Armbian系统"></a>玩客云刷Armbian系统</h1><h2 id="刷系统"><a href="#刷系统" class="headerlink" title="刷系统"></a>刷系统</h2><p>下载<code>Armbian</code>,<code>https://github.com/hzyitc/armbian-onecloud/releases</code>,我这里下载<code>[Armbian-unofficial_23.11.0-trunk_Onecloud_bookworm_current_6.1.63.burn.img.xz](https://github.com/hzyitc/armbian-onecloud/releases/download/ci-20231122-125058-UTC/Armbian-unofficial_23.11.0-trunk_Onecloud_bookworm_current_6.1.63.burn.img.xz)</code></p><p>按玩客云刷机教程，进行刷机。</p><h2 id="安装casaos"><a href="#安装casaos" class="headerlink" title="安装casaos"></a>安装<code>casaos</code></h2><ol><li>连接大路由器中，通过路由器后台查看具体的<code>ip</code>地址</li><li>通过<code>ssh</code>连接刚才看到的<code>ip</code></li><li>设置时间<pre class=" language-shell"><code class="language-shell">date -Rcp /usr/share/zoneinfo/Asia/Shanghai /etc/localtimedate -R </code></pre></li><li>设置代理，换成国内的源，<code>armbian</code>是<code>debin</code></li></ol><pre class=" language-shell"><code class="language-shell"># nano /etc/apt/sources.list# 然后注释掉原来的，添加下面的，然后使用Ctrl+x退出deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmwaredeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmwaredeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmwaredeb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware# deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</code></pre><ol start="7"><li>更新及安装<pre class=" language-shell"><code class="language-shell">apt-get update && apt-get upgrade</code></pre></li></ol><p>apt-get install net-tool</p><pre><code>9. 安装`docker`和`caocaos````shellapt install docker.io# 安装casaos，预计10分钟左右curl -fsSL https://get.casaos.io | sudo bash# 如果需要卸载，使用命令casaos-uninstall</code></pre><ol start="11"><li>登陆后台</li></ol><ul><li>登陆后台 <a href="http://192.168.0.103/#/welcome" target="_blank" rel="noopener">http://192.168.0.103/#/welcome</a>  其中ip地址为设备的ip</li><li>设置初始化等会账户<ul><li>用户名：admin</li><li>密  码：admin123</li></ul></li></ul><ol start="12"><li>设置静态<code>ip</code>地址<br>df</li><li>设置外网访问<br>外网访问，做成小型网站服务器</li><li>dsf</li></ol><h2 id="应用汇总"><a href="#应用汇总" class="headerlink" title="应用汇总"></a>应用汇总</h2><p>[[202402081550]]<br>大部分都可以通过<code>App Store</code>里面安装，但是由于玩客云是<code>armv7</code>的设备，最好添加一下应用的源，可以选择添加应用源，点击问好进入源的页面，然后复制源过来，点击添加，我这里直接添加了<code>armV7</code>的源 <a href="https://play.cuse.eu.org/Cp0204-AppStore-Play-arm.zip" target="_blank" rel="noopener">https://play.cuse.eu.org/Cp0204-AppStore-Play-arm.zip</a></p><ul><li>家用<code>Nas</code>和影音服务器</li><li>小型网站服务器</li><li>电视盒子</li></ul><h2 id="安装Alist"><a href="#安装Alist" class="headerlink" title="安装Alist"></a>安装<code>Alist</code></h2><p>（1）进入到<code>casaos</code> 的<code>App Store</code>, 搜索<code>Alist</code>即可安装。<br>（2）安装完后，进入<code>Alist</code>页面，我这里是 <a href="http://192.168.0.103/#/" target="_blank" rel="noopener">http://192.168.0.103/#/</a> ，默认的密码需要后台<code>docker</code>启动日志里找下。进入后可以修改密码，为方便记忆，我这里直接修改为和进入<code>casaos</code>一样的密码。</p><pre class=" language-shell"><code class="language-shell">docker logs alist# 可以看到如下日志打印root@onecloud:~# Successfully created the admin user and the initial password is: 8JHi7rRk </code></pre><p>（3）进入后发现是空白的，因为现在还没有添加任何一个挂载盘。可以把百度云盘、阿里云盘都挂载过来，还可以直接挂载分享链接地址，挂载后可以直接下载、查看，很方便。具体挂载方法官方文档里面描述的非常详细 <a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html" target="_blank" rel="noopener">https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html</a><br>（4）进入到<code>Alist管理</code> —- 存储，选择添加，按上面一步的步骤添加需要挂载的盘即可。</p><p><strong>遇到几个问题：</strong><br>（1）挂载了百度云盘后，发现里面的视频一直无法播放<br>解决：主要是百度云盘对请求的标头<code>User-angent</code>有要求，要求必须为<code>pan.baidu.com</code>。这里用到了一个<code>Chrome</code>查插件，「User-Agent Switcher and Manager.crx」,可以在 <a href="https://www.aliyundrive.com/s/7Q9oppCxXT1" target="_blank" rel="noopener">https://www.aliyundrive.com/s/7Q9oppCxXT1</a> 下载到。安装后直接修改并应用即可<br>（2）无法预览百度云盘里面的pdf等，提示<code>pdf.js</code>失败<br>解决：暂未解决。看<code>issus</code>里面 <a href="https://github.com/alist-org/alist/issues/4739" target="_blank" rel="noopener">https://github.com/alist-org/alist/issues/4739</a> 也有很多人遇到了相同问题，初步看是默认的只提供了<code>https</code>的访问请求，本地的需要自己下载一个<code>pdf.js</code>，然后修改 设置 —- 预览 —- <code>Iframe 预览</code> 里面的地址到自己的地址。</p><p><strong>其他：</strong><br>可以通过<code>WebDav</code>映射到本地盘，或者在电视等支持这种协议的进行添加，实现<code>NAS</code>、音影服务器的功能。电脑可以下载 <code>RaiDrive</code>软件。</p><h2 id="外网穿透zerotier"><a href="#外网穿透zerotier" class="headerlink" title="外网穿透zerotier"></a>外网穿透<code>zerotier</code></h2><ul><li><a href="https://www.zerotier.com/" target="_blank" rel="noopener">https://www.zerotier.com/</a> 注册账号</li><li>Create A Network,我创建的是NETWORK ID是<code>48d6023c46bf1813</code></li><li>在玩客云上安装，可以<code>docker</code>安装，也可以直接安装，这里用命令直接安装<pre class=" language-shell"><code class="language-shell"># 安装zerotiercurl -s https://install.zerotier.com | sudo bash# 查看运行状态zerotier-cli status# 设置开机启动sudo systemctl enable zerotier-one.service# 加入自己的网络zerotier-cli join 48d6023c46bf1813</code></pre></li><li>到<code>zerotier</code>网站点击进去自己的网络，然后给刚才加入成功的设备前面<code>Auth</code> 勾选上。</li><li>手机和电脑上也安装下，（有个问题，我手机上链接wifi时候可以访问玩客云，无线就不行了，可能还是有问题，也无法看到设备。后面发现移动的流量可以，但是电信的不行）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 玩客云 </tag>
            
            <tag> Armbian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年总结</title>
      <link href="/2023-nian-zong-jie.html"/>
      <url>/2023-nian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="2023年度总结"><a href="#2023年度总结" class="headerlink" title="2023年度总结"></a>2023年度总结</h1><p>过去的2023年，感觉时间过的比以往都要快，生活的节奏，家庭的节奏，工作的节奏好像都走的很快。整体经济下行周期背景下，遇到ChatGpt引领的AIGC生成式人工智能的快速发展，让我们又进入了一个不可思议的时代。截止今天（2024年2月19号），openAI发布的Sora（根据文本生成视频，其真实世界模拟程度让人汗颜）更是让我们惊叹。科技的能量，技术的突破背后其实是思维逻辑的改变，当一个算法以类人脑思维推进时候，产生的创造力让我们感叹。也许正是因为大模型多模态技术的突破式发展，让我们感觉好像穿越了一样，这种感觉是当年苹果、安卓火爆的时候才有过的。</p><h2 id="回顾反思"><a href="#回顾反思" class="headerlink" title="回顾反思"></a>回顾反思</h2><p>过去的一年，整体看是最有预测感的一年，年初制定的计划，规划的事项，完成度以及按部就班的推进感，让自己感觉很踏实。这得益于《认知觉醒》和《只管去做》这两本个人成长类数据，在上半年中都有保持阅读、运动、每日反省总结，目标感强了行动力就会变强，带来的成就感就会越大，给自己的自信心也会更大，自律感带来愉悦，心智带宽的释放也让自己头脑更为清醒。</p><p>上半年比较充实，包括春天和家人一起旅游。</p><ul><li>1月份 德寿宫，古月桥</li><li>2月份 动物园，西溪湿地公园，城隍阁</li><li>3月份 天屿山，千岛湖，太子湾,  灵隐寺</li><li>5月份 安昌古镇， 南浔古镇</li><li>12月份 苏州</li></ul><p>也写了几篇专利，下来的有2篇，但是没有完成既定的目标要求，专利创新奖会越来越难。</p><p>身体是革命的本钱，爸妈也慢慢老了。   要多联系交流，一转眼自己成功曾经眼中的“大人”，心里还是觉得没有长大，真的被保护的太好了。</p><p>个人在工作中投入优先级比家庭高，所以加班也比较玩，新的一年，更加要求平衡工作和生活，要知道夏天成长的很快，一转眼就长大了。她叛逆、暴躁、又有一些胆怯霸道的性格是我们不希望看到的，以身作则的同时，需要多陪伴和引导。</p><p>今年房子装修、入住等。是一个挑战<br>妈妈义务帮带女儿的也结束了，弟媳马上要生了，夏天也进入了下半学期，家庭生活的比重和压力会更大，需要有所倾斜。</p><h2 id="展望规划"><a href="#展望规划" class="headerlink" title="展望规划"></a>展望规划</h2><p>专利<br>健身跑步<br>阅读</p><p>主要是  个人成长   和  团队成长<br>个人包括 基本素质、思维认知水平，还有包括对家人的照顾。</p><p>女儿的情绪控制，倔强等等让我意识到我需要系统的学习养育、儿童心理学等等知识。一来可以让自己不焦虑，二来教育问题不抓好，现在所有的奋斗和期待都会是落空的。<br>阅读补充：《超实用儿童心理学》、《游戏力养育》、《孩子：挑战》、《正面管教》<br>实际陪伴： 讲故事，陪伴玩耍，以身作则阅读。<br>可以买一些教育类数据进行阅读，在家时候就可以阅读。<br>在每日日记反思中，新增一项观察日志，记录对女儿影响最深的事情，已经自己可以帮助的点，不断总结成长。</p><p>旅游类，可以实践拍摄、剪辑、通过vlog、游记等一方面可以记录，一方面可以提高自己这一块的技能，自媒体和AI常态化普遍化的今天，这些技能对后面肯定是有用的。</p><p>个人成长类的阅读和实际需要加深。</p><p>生活，房子装修、美学等这块一点细胞也没有，但是很好，任何空白的对个人来说都是很好的成长。</p><ul><li><input disabled="" type="checkbox"> </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coding上部署静态页面</title>
      <link href="/coding-shang-bu-shu-jing-tai-ye-mian.html"/>
      <url>/coding-shang-bu-shu-jing-tai-ye-mian.html</url>
      
        <content type="html"><![CDATA[<h1 id="coding上部署静态页面"><a href="#coding上部署静态页面" class="headerlink" title="coding上部署静态页面"></a><code>coding</code>上部署静态页面</h1><p>官方教程：<br><a href="https://coding.net/help/docs/devops/ci/practice/static-website-paas.html" target="_blank" rel="noopener">https://coding.net/help/docs/devops/ci/practice/static-website-paas.html</a></p><p>通过「持续集成」把 HTML 自动部署到「云存储」，变成静态网站。</p><ol><li>把项目代码推送到 「CODING 代码仓库」。</li><li>在「腾讯云 对象存储 COS」中创建一个「公有读私有写」的「存储桶」，并在设置中开启「静态网站」，即可获得一个<a href="https://html-cos-demo-1257110097.cos-website.ap-chengdu.myqcloud.com/" target="_blank" rel="noopener">访问链接</a>，然后在「腾讯云 账号」的「访问管理」中获取「访问密钥」。</li><li>在「CODING 持续集成」中创建一个 构建任务，把下文的 <code>Jenkinsfile</code> 复制进去，设置环境变量，然后手动「立即构建」，构建成功，访问上面的链接即可看到网站。下次推送代码即可自动部署。</li><li>如果你的域名已备案，则可在「腾讯云 对象存储」的设置中绑定「自定义加速域名」，会提示开通「内容分发网络 CDN」，小型网站建议选择「按使用流量计费」（<a href="https://buy.cloud.tencent.com/price/cdn" target="_blank" rel="noopener">每月赠送 10GB</a>，小型网站一般用不完），然后进入「内容分发网络 CDN」——「域名管理」——某个域名——「高级设置」——「HTTPS 配置」中，申请免费的 HTTPS 证书，并开启「HTTPS 回源」、「强制跳转 HTTPS」和「HTTP 2.0」。</li><li>在「腾讯云 对象存储 COS」中开启「自动刷新 CDN」，参考文档「<a href="https://cloud.tencent.com/document/product/436/45597" target="_blank" rel="noopener">CDN 缓存刷新</a>」。</li></ol><pre class=" language-shell"><code class="language-shell">pipeline {agent anystages {stage('检出') {steps {checkout([$class: 'GitSCM',branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])}}stage('部署到腾讯云存储') {steps {sh "coscmd config -a ${env.COS_SECRET_ID} -s ${env.COS_SECRET_KEY} -b ${env.COS_BUCKET_NAME} -r ${env.COS_BUCKET_REGION}"sh 'rm -rf .git'sh 'coscmd upload -r ./ /'}}}}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> coding </tag>
            
            <tag> 网站部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移到Github Action</title>
      <link href="/qian-yi-dao-github-action.html"/>
      <url>/qian-yi-dao-github-action.html</url>
      
        <content type="html"><![CDATA[<h1 id="迁移到-Github-Action"><a href="#迁移到-Github-Action" class="headerlink" title="迁移到``Github-Action"></a>迁移到``Github-Action</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>博客很久没有维护更新了，每年也就春节前后得空才有时间写写总结，然后更新一下。由于博客直接部署了<code>Travis CI</code>持续集成，可以参考之前的文章[[2020-02-06-使用TravisCI持续集成]], 也是非常省心。可是今天突然发现不能使用了，一顿抓狂。<br>后来仔细看了下<code>Travis CI</code>的说明，原来是修改了使用规格，在免费额度使用完以后，就必须收费才可以使用。这也倒不奇怪，作为免费使用的业务，以及方便了非常多的开源项目进行持续集成。随着<code>github</code>推出官方的<code>github action</code>持续集成工具后，市场空间不断被压缩，为求生存，收费也是可以理解的。<br>不过，作为一个不愿花钱的个人而言，交钱买服务，实在是没有必要，毕竟也不便宜。所以今天得空，打算研究下<code>github action</code> 想办法完成切换。</p><h2 id="切换步骤"><a href="#切换步骤" class="headerlink" title="切换步骤"></a>切换步骤</h2><blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/161969042" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/161969042</a></p></blockquote><h3 id="创建Github-Persional-Access-Token"><a href="#创建Github-Persional-Access-Token" class="headerlink" title="创建Github Persional Access Token"></a>创建<code>Github Persional Access Token</code></h3><p>主要生成方法可以见[[2020-02-06-使用TravisCI持续集成#^b293ba]]</p><h3 id="设置仓库Secrets"><a href="#设置仓库Secrets" class="headerlink" title="设置仓库Secrets"></a>设置仓库<code>Secrets</code></h3><p>找到<code>hexo-source</code>这个源代码仓库，注意不是部署<code>page</code>的仓库，是源代码仓库。找到<code>Settings</code>，左边栏选择 <code>Secrets and variables--&gt;Actions</code>，点击<code>New repository secret</code>进行添加。我这里把<code>Name</code>写为<code>GIT_REPO_TOKEN</code>,然后内容写上面一步申请到的<code>Persional Access Token</code>。为了保持和之前的内容同步，这里顺便也把<code>coding</code>和<code>gitee</code>同步添加下。<br>汇总如下，一共添加了3个<code>token</code>，一个<code>username</code></p><ul><li><code>GIT_REPO_TOKEN</code></li><li><code>CODING_REOP_TOKEN</code></li><li><code>GITEE_REPO_TOKEN</code></li><li><code>CODING_USER_NAME</code></li></ul><h3 id="创建工作流脚本"><a href="#创建工作流脚本" class="headerlink" title="创建工作流脚本"></a>创建工作流脚本</h3><p>在<code>hexo-source</code>源码仓库下面新建目录<code>.github/workflows</code>，这是<code>action</code>脚本的目录，里面使用<code>*.yml</code>脚本，即采用<code>YAML格式</code>，文件名可以任意起，我这里就叫为<code>myblogci.yml</code><br>具体的内容如下：</p><pre class=" language-shell"><code class="language-shell"># workflow的名称name: lmwings blog actions# 触发条件：在 push 到 master 触发wrokflowon:  push:    branches:       - masterenv:  TZ: Asia/Shanghai#定义每一项jobjobs:  lmwings-blog:    name: lmwings blog build & deploy    runs-on: ubuntu-latest # 使用最新的 Ubuntu 系统作为编译部署的环境    steps:    # step1: 拉取代码    - name: Checkout codes      uses: actions/checkout@v2     # step2: 设置 node.js 环境    - name: Use Node.js 12.x      uses: actions/setup-node@v1       with:        node-version: '12.x'    # step3: 设置包缓存目录，避免每次下载    - name: Cache node modules      uses: actions/cache@v2      env:        cache-name: cache-node-modules      with:        path: ~/.npm        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}        restore-keys: |            ${{ runner.os }}-build-${{ env.cache-name }}-            ${{ runner.os }}-build -            ${{ runner.os}}-    # step4: 下载 hexo-cli 脚手架及相关安装包,其中travis_env_init.sh是自己定义的文件    - name: Install hexo dependencies      env:         GIT_REPO_TOKEN: ${{ secrets.GIT_REPO_TOKEN }}        GITEE_REPO_TOKEN: ${{ secrets.GITEE_REPO_TOKEN }}        CODING_REPO_TOKEN: ${{ secrets.CODING_REPO_TOKEN }}        CODING_USER_NAME: ${{ secrets.CODING_USER_NAME }}          run: |        sh travis_env_init.sh    # step5: 编译    - name: Build Generate files      run: |        hexo clean        hexo generate    # step6: 部署    - name: Deploy lmwings blog      # 通过hexo的deploy命令将编译后的blog推送到pages仓库      run: |        cd ./public && git init && git add .        git config --global user.name "lmwings"        git config --global user.email "1321559220@qq.com"        hexo deploy > /dev/null</code></pre><p>提交上面的脚本后，发现并没有运行成功，下面是遇到的问题：<br>问题1：后台查看<code>action</code>的运行日志，发现提升<code>npm</code>安装不成功</p><pre class=" language-shell"><code class="language-shell">npm ERR! code EEXIST[38](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:39)npm ERR! syscall symlink[39](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:40)npm ERR! path ../lib/node_modules/hexo-cli/bin/hexo[40](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:41)npm ERR! dest /opt/hostedtoolcache/node/12.22.12/x64/bin/hexo[41](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:42)npm ERR! errno -17[42](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:43)npm ERR! EEXIST: file already exists, symlink '../lib/node_modules/hexo-cli/bin/hexo' -> '/opt/hostedtoolcache/node/12.22.12/x64/bin/hexo'[43](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:44)npm ERR! File exists: /opt/hostedtoolcache/node/12.22.12/x64/bin/hexo[44](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:45)npm ERR! Remove the existing file and try again, or run npm[45](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:46)npm ERR! with --force to overwrite files recklessly.[46](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:47)[47](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:48)npm ERR! A complete log of this run can be found in:[48](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:49)npm ERR! /home/runner/.npm/_logs/2023-03-12T05_25_33_207Z-debug.log[49](https://github.com/lmwings/hexo-source/actions/runs/4395938659/jobs/7698063505#step:5:50)Error: Process completed with exit code 239.</code></pre><p>解决方式：<br>因为前面已经加载过<code>node</code>环境，所以下面这个不需要再安装</p><pre class=" language-shell"><code class="language-shell">#注释掉下面这句#npm install -g hexo</code></pre><p>问题二：发现插件<code>hexo-permalink-pyinyin</code>安装存在问题</p><pre class=" language-shell"><code class="language-shell">npm ERR! code E404[106](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:107)npm ERR! 404 Not Found - GET [https://registry.npmjs.org/hexo-permalink-pyinyin](https://registry.npmjs.org/hexo-permalink-pyinyin) - Not found[107](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:108)npm ERR! 404[108](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:109)npm ERR! 404 'hexo-permalink-pyinyin@latest' is not in the npm registry.[109](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:110)npm ERR! 404 You should bug the author to publish it (or use the name yourself!)[110](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:111)npm ERR! 404[111](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:112)npm ERR! 404 Note that you can also install from a[112](https://github.com/lmwings/hexo-source/actions/runs/4395992399/jobs/7698144884#step:4:113)npm ERR! 404 tarball, folder, http url, or git url</code></pre><p>解决方法：<br>暂时注释下下面的插件：</p><pre class=" language-shell"><code class="language-shell">npm i hexo-permalink-pyinyin --save</code></pre><p>但是我的博客文章名称一般都是中文的，所以去掉这个插件其实是不合适的。可以代替的插件<code>npm install hexo-abbrlink --save</code>，后续也可以使用这个插件。<br>进一步分析发现，<code>action</code>使用的默认源是<code>registry.npmjs.org</code>,而这个插件的作者只发布到了<code>npmjs.com</code>,所以应该只要修改下<code>registry</code>就可以。<br>为了统一，这里统一设置为阿里源，目前名字已经修改。同时使用<code>cnpm</code>进行安装，在这个源里面提前搜索了下，有这个插件存在。</p><pre class=" language-shell"><code class="language-shell">npm install -g cnpm --registry=https://registry.npmmirror.comcnpm install hexo-permalink-pinyin</code></pre><p>实际提交后，遇到了新的问题。</p><p>问题三：出现安装<code>cnpm</code>失败</p><pre class=" language-shell"><code class="language-shell">+ cnpm@9.0.1[346](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:347)added 672 packages from 246 contributors in 73.771s[347](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:348)internal/modules/cjs/loader.js:818[348](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:349) throw err;[349](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:350) ^[350](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:351)[351](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:352)Error: Cannot find module 'fs/promises'[352](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:353)Require stack:[353](https://github.com/lmwings/hexo-source/actions/runs/4396290772/jobs/7698636976#step:4:354)- /opt/hostedtoolcache/node/12.22.1</code></pre><p>发现这个是一个共性的问题，应该是<code>cnpm</code>和<code>node</code>版本匹配的问题，所以使用低版本的<code>cnpm</code>安装。<br>解决方法：安装低版本比如7.1.0版本</p><pre class=" language-shell"><code class="language-shell">npm uninstall -g cnpmnpm install -g cnpm@7.1.0 --registry=https://registry.npmmirror.comcnpm install hexo-permalink-pinyin</code></pre><p>问题四：解决了上面的问题以后，还剩下最后一个问题</p><pre class=" language-shell"><code class="language-shell">To [https://github.com/lmwings/lmwings.github.io.git](https://github.com/lmwings/lmwings.github.io.git)[31](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:32) + e487ca3...08d0a07 HEAD -> master (forced update)[32](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:33)To [https://e.coding.net/lmwings/lmwings.git](https://e.coding.net/lmwings/lmwings.git)[33](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:34) + e487ca3...08d0a07 HEAD -> master (forced update)[34](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:35)fatal: could not read Password for 'https://***@gitee.com': No such device or address[35](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:36)FATAL Something's wrong. Maybe you can find the solution here: [https://hexo.io/docs/troubleshooting.html](https://hexo.io/docs/troubleshooting.html)[36](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:37)Error: Spawn failed[37](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:38) at ChildProcess.<anonymous> (/home/runner/work/hexo-source/hexo-source/node_modules/hexo-util/lib/spawn.js:51:21)[38](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:39) at ChildProcess.emit (events.js:314:20)[39](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:40) at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12)[40](https://github.com/lmwings/hexo-source/actions/runs/4396352677/jobs/7698733700#step:6:41)Error: Process completed with exit code 2.</code></pre><p>可以看到这个是部署过程中的异常，主要是提交到国内平台<code>gitee</code>和<code>coding</code>出现了异常。之前为了国内访问速度快一些，特意做的分流出来，由于长时间没有维护，国内代码平台规则变更，导致的问题。这个只要重新申请对应平台的<code>tocken</code>就ok</p><h3 id="总结和反思"><a href="#总结和反思" class="headerlink" title="总结和反思"></a>总结和反思</h3><p>总的来说，切换难度不大。遇到的问题都为本身软件包安装的问题。由于国内代码平台规则升级频繁，需要常常关注，否则就很容易出问题，后续打算同步部署到<code>Vercel</code>中。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chatGPT注册和使用</title>
      <link href="/chatgpt-zhu-ce-he-shi-yong.html"/>
      <url>/chatgpt-zhu-ce-he-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h1 id="chatGPT注册和使用"><a href="#chatGPT注册和使用" class="headerlink" title="chatGPT注册和使用"></a>chatGPT注册和使用</h1><blockquote><p><a href="https://openai.com/blog/chatgpt/" target="_blank" rel="noopener">https://openai.com/blog/chatgpt/</a></p></blockquote><p>注册需要美国手机号，同时登陆访问需要国外的<code>ip</code>地址</p><h2 id="验证手机号准备"><a href="#验证手机号准备" class="headerlink" title="验证手机号准备"></a>验证手机号准备</h2><p>可以通过在线打码平台进行。如<code>sms-activate</code></p><h2 id="直接注册"><a href="#直接注册" class="headerlink" title="直接注册"></a>直接注册</h2><p>需要事先准备好邮箱，可以直接用微软的邮件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openai </tag>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年总结</title>
      <link href="/2022-nian-zong-jie.html"/>
      <url>/2022-nian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="2022年度总结"><a href="#2022年度总结" class="headerlink" title="2022年度总结"></a>2022年度总结</h1><p>走过冬雪，淋过春雨，晒过夏日，看过秋收，再遇冬寒，再迎春风，又是一年轮回。<br>年少轻狂，点滴奋斗，常常期待能够围炉煮茶，悠然南山的悠闲和惬意。 “可能性”  和我想聚焦的 “变化”  感觉不谋而和，23年注定是求变的一年，大环境在变，团队在变，以不变应万变的做法，肯定是会死的。只有提升认知、不断打破自己或者团队是舒适区，才有突围的“可能性”。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>感觉<code>2022</code>年更为短暂一些，全年过的飞快，疫情咬住了头尾。对于<code>2022</code>年春节，滨江突发疫情，也让我第一次没有回家过年，所幸是女儿和老妈元旦就提前回家了。现在回想起来也比较有意思，和老婆两个人在没有宽带，手机流量限速的绝境下，宁是在“吃”和“睡”中读过了一整个春节。也感受了安静的“国际滨”，确实一点年味都没有，只有不能回家的无奈。路上偶尔迎面走来的行人，大家相互之间像看到敌人一样，捏紧鼻梁上的口罩然后加快脚步飞撩而过。依稀记得除夕那天，跑回家吃了顿年夜饭的狼狈（提前和疾控中心沟通，说可以回去，但是到家后镇上要求隔离，于是就直接回杭州了），还害得全家人拉去做个了核酸，各地层层加码的防疫政策，确实给大家带来了非常的不便，确都能理解。终于，12月中旬，突然的放开管控，取消行程码，取消常态化核酸检测，取消扫码验码，对于习惯3年的我们，反而一下子失去了安全感。之前最多抱怨政策不方便，却也安心。实际情况也和预计的一样，在将近2周的时间内，周围的也陆续的感染。我算是比较早感染的，12月27号，老婆30岁生日这天，我还买了礼物、蛋糕打算回家给她过生日。没想混管阳性，又单独做了个单管核酸，然后就匆匆回家。本以为是感冒而已，虽然有点累，但是并没有网上屯刀片什么的新冠症状。后面的一个星期里面，老婆也阳了，老妈也阳了，夏天也阳了。全身酸痛的感觉痛苦的不行，夏天也高烧到40度，还好都过去了，基本在一周左右时间都恢复正常，用老婆的话说:”你30岁的时候，陪我做月子。我30岁的时候，全家人配你做‘月子’（新冠自觉的居家了）”。疫情带来了不便和难受，还好一切都过去了。疫情带来的无论是对个人生活的影响，还是对经济的影响，随着年底的放开，都会慢慢好转，在漫长的抗疫上，现在也终于迎来了曙光。想想疫情3年以来，别说出国游，出省游都没有了。</p><p><code>2022</code>年感觉做的比较好的地方是，3月份、4月份春天每到周末，一家人就去周边公园野餐。一块野餐垫，一顿简单的饭菜，坐在公园草地上，晒晒太阳，夏天跌跌撞撞的跑来跑去，惬意悠闲。也是少有的陪伴家人的时光，生命中最重要的3个女人，老妈，老婆，女儿。现在回想起来，还能记得老婆坐在草地上拆了一个小时的风筝线的囧境；还记得等待了一整天，黄昏时刻起风了，满天的风筝，我的也放完了500米线，那会真是开心和激动；也还记得开心过后，风筝带着500米风筝线飞走的尴尬和绝望。现在问女儿，“爸爸的风筝呢？”，还在丫丫学语的她，还能断断续续的说“飞跑了”。如果有视频，那是一个比泰囧还囧的窘境吧，哈哈。</p><p><code>2022</code>年终于摇到了号，房子有了着落，对于中国人的传统来说，算是在杭州生根了，是第二个家乡。我也算实现了年少时的轻狂目标，在我看来，一代一代需要一点点进步，这才是香火气，传承延续发展进步。在我有记忆开始，爸妈就去市里面做生意，靠着踏黄包车，然后贩卖西瓜、甘蔗维持家用。我跟着奶奶在村子里长大，那会的村子很小，坑坑洼洼的土坑路。随手就能抓一块泥巴，然后躲在门前的角落里，那是属于我自己的百宝箱，藏着用泥巴捏着的手机大哥大，还有坦克….<br>家里庭院的小池塘里面，还有我心爱的红鲤鱼。后来水泥路通了，池塘埋了。我也去了城里，爸妈靠着起早贪黑的打拼，买了一套房子。在哪里度过了我小学、初中、高中，覆盖了我几乎全部年少记忆。如今，我又进步了一步，在杭州也有了自己的房子，这里会是我们这个家打拼的新起点。对于父母，我觉得自豪，那是出人头地，光耀门楣的事情，是能让他们开心放心的事情；对于老婆，是一份携手一生是承诺，是生活越过越好的痕迹，见证我们奋斗的点点滴滴；对于女儿，是责任，最大可能的给与她最好的环境。当然，最大的问题，就是压力肯定是成倍的增加了。房贷的压力相信也是奋斗的动力，至少是个好的起点。</p><p><code>2022</code>年开始了跑步，个人最快一公里，个人最快5公里，个人最长距离，个人第一个10公里…. 每一项成就，就记录着自己的进步和成长。汗流浃背，精疲力尽的感觉非常减压，爽快。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>新的一年里面：<br>多陪伴家人，女儿真的一下就长大了，现在抱起来都很累了，学习能力很强，什么都会很快模仿，给她好的陪伴，好的教育指导，帮助她形成正确的人生观价值观非常重要。父母也老了，一不小心老爸都61了，老妈也58了，小时候想快点长大，有了家庭才发现，多么希望还是哪个小时候的自己，也要多陪陪他们，老妈也爱各种游玩，多带着一起好好玩玩杭州，玩玩周边。<br>学习了解育儿类知识，如果培养她的逻辑思维能力、表达沟通等能力，尽可能给她更科学的成长教育方式。</p><p>为减少房贷的压力，开源节流和努力赚钱都是必须的，增加输入减少输出才能让存量变大，高负载的压力，抗变化的能力太差了，对个人和家庭都是一种风险。就先<code>22</code>年疫情和美国制裁的影响，公司业绩增长受阻，年终奖等也急剧下降。大家都调侃“本来就不富裕的家庭，更加雪上加霜”。<code>23</code>年注定是不平凡的一年，是转折的一年。对我而言，最为现实的副业，应该是写专利。多写专利多转公司补助，对现在的时间精力安排也最为可能。类似自媒体电商占用精力太大，回报的周期和不确定性都太长了。这也是今年需要聚焦的一年，只有解决“温饱”，有富余“存量”，才有折腾的可能性。</p><p>个人成长上，需要持续进行阅读和锻炼，精神和身体的成长才有利于我立足这个变化的世界，给自己更多机会和可能。</p><p>阅读计划：</p><ul><li>个人成长类<ul><li>认知觉醒</li><li>认知驱动</li><li>快速阅读（实践练习）</li></ul></li><li>管理类<ul><li>关键时刻MOT</li><li>可复制的成功</li><li>变革的力量</li><li>企业如何向军队学习打仗</li><li>教练式领导力（有效沟通类）</li></ul></li><li>文学类<ul><li>额尔古纳河右岸</li><li>苏东坡传</li><li>活着</li></ul></li></ul><p>运动：<br>目前总跑量107.59公里，希望每周能跑10公里，全年至少跑400公里的路程</p><p>体重的控制：<br>随着体重的指数增长，明显的赘肉，这会带来很大问题，每年的计划里面都有这一项，却总是没有很好落实，体重从140一种飙升到170，一不小心有突破180的可能。控制饮食是关键，寄希望于靠运动是非常痛苦的。</p><p>工作上，需要保持创新和进步，希望在软著和专利上面有所沉淀，积极准备职称申报。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode调试开发</title>
      <link href="/vscode-diao-shi-kai-fa.html"/>
      <url>/vscode-diao-shi-kai-fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode开发环境"><a href="#vscode开发环境" class="headerlink" title="vscode开发环境"></a><code>vscode</code>开发环境</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>vscode</code>是很好的开发IDE，使用简单，主要还是免费的，如果</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用</title>
      <link href="/vim-shi-yong.html"/>
      <url>/vim-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h1 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a><code>vim</code>使用</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>vim</code>是很强大的编辑器，一直没有好好的用起来，下决心系统的学习使用下，提高自己的工作效率，也可以耍下酷。</p><h2 id="gvim安装和配置"><a href="#gvim安装和配置" class="headerlink" title="gvim安装和配置"></a><code>gvim</code>安装和配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/vim/vim-win32-installer/releases" target="_blank" rel="noopener">https://github.com/vim/vim-win32-installer/releases</a> 下载对应版本</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接按提示完成安装</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>需要设置环境变量，</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>有很多功能很强大的插件，但是安装配置很麻烦，不够也有很大现成安装好的，比如<code>vimplus</code>, 以及<code>spacevim</code>，对于新手入门来说，插件简直就是灾难，用法也都有差异，如果聚焦于插件，就本末倒置了，插件的目的是为了解决时间操作中的某些特定需求，用来提高效率。也就是说，正常情况下，我们不需要安装任何我们用不到的插件。这样也可以减低学习成本，减少焦虑。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picGo和gitee搭建网络图传</title>
      <link href="/picgo-he-gitee-da-jian-wang-luo-tu-chuan.html"/>
      <url>/picgo-he-gitee-da-jian-wang-luo-tu-chuan.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运营维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> picGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github提交失败</title>
      <link href="/github-ti-jiao-shi-bai.html"/>
      <url>/github-ti-jiao-shi-bai.html</url>
      
        <content type="html"><![CDATA[<h1 id="github提交失败问题处理"><a href="#github提交失败问题处理" class="headerlink" title="github提交失败问题处理"></a><code>github</code>提交失败问题处理</h1><h2 id="errno-10053错误"><a href="#errno-10053错误" class="headerlink" title="errno 10053错误"></a><code>errno 10053</code>错误</h2><p>执行<code>git push origin master</code>后，出现下面错误</p><p>错误日志：</p><pre class=" language-shell"><code class="language-shell">## 报下面错误：git push origin masterfatal: unable to access 'https://github.com/lmwings/hexo-source.git/': OpenSSL SSL_read: Connection was aborted, errno 10053</code></pre><p>问题原因：</p><p><code>github</code>对上传大小做了限制，需要设置下</p><p>解决方式：</p><pre class=" language-shell"><code class="language-shell"># 解决方法：# 设置上次大小限制# step1: 重新设置大小，并且sslVerify设置为falsegit config http.postBuffer 524288000git config --global http.sslVerify false# step2：查看配置是否生效git config -l# step3：再次提交推送git push origin master</code></pre><h2 id="TaskCanceledException-encountered错误"><a href="#TaskCanceledException-encountered错误" class="headerlink" title="TaskCanceledException encountered错误"></a><code>TaskCanceledException encountered</code>错误</h2><p>错误日志：</p><pre class=" language-shell"><code class="language-shell">TaskCanceledException encountered</code></pre><p>解决方式：</p><pre class=" language-shell"><code class="language-shell">git config –global credential.helper manager# 再提交</code></pre><h2 id="Support-for-password-authentication-was-removed-on-August-13-2021"><a href="#Support-for-password-authentication-was-removed-on-August-13-2021" class="headerlink" title="Support for password authentication was removed on August 13, 2021"></a><code>Support for password authentication was removed on August 13, 2021</code></h2><p>错误日志：</p><pre class=" language-shell"><code class="language-shell">Support for password authentication was removed on August 13, 2021. Please use a perso</code></pre><p>问题原因：</p><p><code>github</code>自从<code>21年8月13日</code>后不再支持用户名密码的验证，需要创建个人访问令牌。这个其实在邮件中收到很多次提醒，但是自己一直也没有在意。</p><p>解决方法：</p><p>（1）先生成一个令牌</p><p>首先进入到 <code>github</code>自己的项目仓库中，我的地址是<code>https://github.com/lmwings/hexo-source</code></p><p>然后点击<code>Settings</code>—-<code>Developer settings</code> —- <code>Personal access tokens</code> —- <code>Generate new token</code> </p><p>我这里填写为</p><ul><li>Note: push authentication</li><li>Expiration: No expiration</li><li>Select scopes: 我就勾选了repo和workfolw，其他的也可以选择</li></ul><p>最后点击生成<code>tokens</code>，一定要记住生成的那一串支付串。</p><p>（2）修改现在的项目<code>url</code></p><p>第一步先查看自己现在远程目录的url地址</p><pre class=" language-shell"><code class="language-shell"># step1： 查看现在项目的urlgit remote -v#我的输出为：origin  https://github.com/lmwings/hexo-source.git (fetch)origin  https://github.com/lmwings/hexo-source.git (push)</code></pre><p>第二步按如下格式设置</p><pre class=" language-shell"><code class="language-shell"># step2: 修改远程目录git remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git</code></pre><p>其中,<code>your_token</code>为上面一步生成的令牌字符串，<code>USERNAME</code>为自己<code>github</code>的用户名，<code>PEPO</code>就是我们的仓库名。</p><p>我自己的设置就是</p><pre class=" language-shell"><code class="language-shell">git remote set-url origin https://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@github.com/lmwings/hexo-source.git</code></pre><p>第三步就可以顺利的提交了。</p><p><strong>其他注意：</strong></p><ol><li><p>如果是重新<code>clone</code>的仓库，只要加上口令即可；</p><pre class=" language-shell"><code class="language-shell">git clone https://<your_token>@github.com/<USERNAME>/<REPO>.git</code></pre></li><li><p>提交之前最好先删除<code>git</code>用户密码缓存</p><pre class=" language-shell"><code class="language-shell"># 运行一下命令缓存git config --global credenial.helper wincred# 删除掉缓存在git中的用户名和密码git credential-manager unistall</code></pre></li></ol><ol start="3"><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运营维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian笔记使用</title>
      <link href="/obsidian-bi-ji-shi-yong.html"/>
      <url>/obsidian-bi-ji-shi-yong.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Obsidian笔记软件使用指南"><a href="#Obsidian笔记软件使用指南" class="headerlink" title="Obsidian笔记软件使用指南"></a><code>Obsidian</code>笔记软件使用指南</h1><blockquote><p>参考的教程：<a href="https://forum-zh.obsidian.md/t/topic/2144" target="_blank" rel="noopener">https://forum-zh.obsidian.md/t/topic/2144</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>笔记软件有很多，但是好像一直没有延续使用一个，更多时候可能也使用文本文件随笔的形式记录一下。但是随着工作年限逐步增加。焦虑的心理状态越来越严重，我急需寻找到一款笔记好用的笔记软件，来整理我的思维，来管理我的知识；再寻找的时候，我有几个需求</p><ul><li>需要免费</li><li>文件需要能本地化存储，相反在线的同步，云存储反而不主要</li><li>要能支持<code>markdown</code></li><li>要能支持双链形式，主要是希望能用做知识管理</li></ul><p><code>Obsidian</code>可以满足我的，而且最新版本支持<code>markdown</code>直接可见，让我都可以放弃<code>Typora</code></p><blockquote><p>一个人常常有两种焦虑：</p><ul><li>一种是事情太多，处理不过来，看不清这些事情背后的本质和彼此间的联系，无法判断轻重缓急，因此在做某个具体事的时候，脑子里总还想着另一个更紧急、更糟心的事，没办法静下心来，专注解决当下的问题，导致重要的事情处理不好，又产生一连串的后续问题，陷入事务处理的恶性循环。到最后干脆交给时间去解决，随大流了。</li><li>另一种焦虑是信息过载，大量的信息无从用起，一方面花了大量的时间，主动或者被动的看了听了读了大量的信息，另一方面一旦到要用到的时候要么一脸懵逼，要么总是感觉似曾相识，但就是想不起来，还得继续重复去造轮子。</li></ul></blockquote><p>其他：卡片笔记中有提到<code>Zettelkasten第二大脑 = 滑箱结构（Slipbox） + 工作流程（Workflow）</code>，而<code>Obsidian</code>可以很完美的契合这种方式，也是对自己知识管理的尝试开始；</p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载地址：<a href="https://obsidian.md/" target="_blank" rel="noopener">https://obsidian.md/</a></p><p>下载好以后直接安装打开即可；</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>（1）新建一个库，这里所谓的库，其实就是一个文件夹，也可以理解为一个工作空间，包括后续使用到的内部链接等，一般都只在自己这个库中实现。我的设置为</p><p>库的名称： <code>Notes Obsidian</code></p><p>库的位置：<code>J:\10 知识管理\</code></p><p>（2）</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><strong>建立自己的目录</strong></p><p>使用杜威十进制编码方式；加上工作、生活、学习等大分类；每个大分类里面小分类是相同的东西</p><p><strong>开启模板</strong></p><p>直接用<code>md</code>写模板就ok；可以很方便的用来写工作日志，或者读书笔记；打开插件选项，模板中，有模板文件位置设置，我一般建立一个叫<code>templates</code>用来存放模板文件；</p><p>我创建了一个元数据模板(使用到了<code>Templater</code>插件，<code>date</code>中就是插件的模板语言)：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: Obsidian笔记使用author: Wang Kangcomments: truedate: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">tp.file.creation_date()</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>types: 笔记categories: 学习笔记tags: [Obsidian, 知识管理, 笔记软件]alias:  <span class="token list punctuation">-</span> notes<span class="token list punctuation">-</span> 日记<span class="token hr punctuation">---</span><span class="token title important"><span class="token punctuation">#</span> 标题</span></code></pre><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="元数据METADATA"><a href="#元数据METADATA" class="headerlink" title="元数据METADATA"></a>元数据<code>METADATA</code></h3><p>这个是写在每一篇<code>md</code>笔记开头的内容，是用<code>YAML</code>语言来标记的<code>Front matter</code>, 具体的格式如下：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: 这里是标题author： 这里是作者date： 这里是创建时间tags：<span class="token list punctuation">-</span> 标签1<span class="token list punctuation">-</span> 标签2alias：<span class="token list punctuation">-</span> 别名1<span class="token list punctuation">-</span> 别名2</code></pre><p>对于<code>Obsidian</code>里面原生支持的，其实就是<code>tags</code>和<code>alias</code>两个，其他的字段按自己的习惯创建，这个后续也可以利用其他插件来做统计筛选使用；这两个字段还有其他格式用法：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>tag: 标签1tags: [标签1， 标签2， 标签2]tags：<span class="token list punctuation">-</span> 标签1<span class="token list punctuation">-</span> 标签2alias: 别名1aliases：[别名1， 别名2， 别名3]aliases：<span class="token list punctuation">-</span> 别名1<span class="token list punctuation">-</span> 别名<span class="token title important">2<span class="token punctuation">---</span></span></code></pre><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul><li><code>proxy github</code>: 用来设置插件代理，否则很多插件会无法查询</li><li><code>Templater</code>: 用来创建和使用模板的插件；使用它模板语言可以创建很多模板文件</li><li><code>Calendar</code>:  日历，可以配套日记查看，可以直观的看到代办事项</li><li><code>Advanced Tables</code>: 表格增强插件</li></ul><h3 id="Templater插件用法学习"><a href="#Templater插件用法学习" class="headerlink" title="Templater插件用法学习"></a><code>Templater</code>插件用法学习</h3><p>官方的文档为 <a href="https://silentvoid13.github.io/Templater/" target="_blank" rel="noopener">https://silentvoid13.github.io/Templater/</a><br>基本格式语法为<code>&lt;%  %&gt;</code>包含<br>这里可以和日记关联使用，我配置了官方示例里面的用法。配置了日历的模板</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>creation date: &lt;% tp.file.creation<span class="token italic"><span class="token punctuation">_</span>date() %>modification date:  &lt;% tp.file.last<span class="token punctuation">_</span></span>modified_date("dddd Do MMMM YYYY HH:mm:ss") %><span class="token hr punctuation">---</span>&lt;&lt; [[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">tp.date.now("YYYY-MM-DD",</span> <span class="token attr-name">-1)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>]] | [[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">tp.date.now("YYYY-MM-DD",</span> <span class="token attr-name">1)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>]] >><span class="token title important"><span class="token punctuation">#</span> &lt;% tp.file.title %></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">tp.web.daily_quote()</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="远程备份以及多端同步"><a href="#远程备份以及多端同步" class="headerlink" title="远程备份以及多端同步"></a>远程备份以及多端同步</h3><p><code>Obsidian</code>的最大的好处，就是数据都是本地化，虽然官方也有同步的功能，但是需要收费，有没有办法可以实现远程备份？最好可以保持<code>PC</code>端、还有<code>Android</code>端的同步, 这样方便随时携带查看；<br>可以使用[[gitee]]作为远程参考进行备份，需要熟悉[[git常用命令]]，<br>首先新建一个仓库，我这里以及建立好了一个私有仓库<br><a href="https://gitee.com/lmwings/notes-obsidian.git" target="_blank" rel="noopener">https://gitee.com/lmwings/notes-obsidian.git</a><br>上传到远程仓库中</p><pre class=" language-shell"><code class="language-shell">#进入到本地obsidian目录cd /j/10 知识管理/Notes Obsidian#初始化这个文件git管理git init#设置远程仓库git remote add origin https://gitee.com/lmwings/notes-obsidian.git#把所有文件都添加版本管理git add .git commit -m "first commit"</code></pre><p>这里有一个遇到的问题，<br>去[[gitee]]查看发现仓库中空的文件夹都没有上传成功，这个主要是<code>git</code>里面认为空文件夹是无效的，不需要上传，如果一定需要，可以在空文件夹的目录下面建立一个<code>.gitkeep</code>的文件，可以添加空文件。</p><p>在手机中，可以下载[[MGit]]来拉取远程仓库，然后使用手机端的<code>Obsidian</code>来编辑，由于手机屏幕较小，比较适合用来查看，而不是用来编辑。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="1-安装第三方插件出现无法加载社区插件"><a href="#1-安装第三方插件出现无法加载社区插件" class="headerlink" title="1.安装第三方插件出现无法加载社区插件"></a>1.安装第三方插件出现无法加载社区插件</h3><p>主要是<code>github</code>地址国内访问可能出现；可以用下面两种方式解决：</p><p>方法一：直接在<code>github</code>上下载对应插件；一般在<code>github</code>上搜索<code>obsidian</code>或者<code>plugins</code>即可；</p><p>方法二：安装<code>obsidian-proxy-github</code>插件；</p><p>（1）在这个地址<a href="https://github.com/juqkai/obsidian-proxy-github，下载得到`obsidian-proxy-github-v1.1.0.zip`" target="_blank" rel="noopener">https://github.com/juqkai/obsidian-proxy-github，下载得到`obsidian-proxy-github-v1.1.0.zip`</a></p><p>（2）解压后，将解压文件夹放入笔记目录（库目录）下的插件目录内；如：<code>J:\10 知识管理\Notes Obsidian\.obsidian\plugins</code>， 原理没有<code>plugins</code>的可以直接自己新建</p><p>（3）重启软件，打开<code>proxy github</code>，再次重启即可使用搜索功能；</p><h3 id="2-如何查看文章的大纲"><a href="#2-如何查看文章的大纲" class="headerlink" title="2.如何查看文章的大纲"></a>2.如何查看文章的大纲</h3><p>在[[核心插件]]里面打开大纲，在右边显示栏即可看到</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
            <tag> 知识管理 </tag>
            
            <tag> 笔记软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年总结</title>
      <link href="/2021-nian-zong-jie.html"/>
      <url>/2021-nian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021年度总结"><a href="#2021年度总结" class="headerlink" title="2021年度总结"></a>2021年度总结</h1><p>时间很快，转眼间<code>2021</code>年度也过去了，焦虑的情绪一直蔓延，元旦就要写的年度总结，一再拖延，导致一个春节假期的时间，也没有完成；今天抽空回顾总结一下，一来给自己的焦虑做个自疗，二来思考下<code>2022</code>年度的目标，俞敏洪在《愿青春不负梦想》中说过，人一定要有目标，不一定是长远的目标，但是至少需要有短期的目标，然后踏踏实实的坚持去达到，这个也是现在商业大佬能创业成功背后的密码，有目标，有韧劲。想想人生真的是短暂的，这话听起来好像是年过半百的老年人说出的，但是确实如此；</p><p>总结的套路，无非工作、家庭、个人几个方面，未避免流水账式的纯粹回忆录方式，直接这几方面的总结也直截了当些。</p><p>开始总结前，先回顾下年初确立的<code>flags</code>,看看到底是完成了多少？</p><h2 id="年初规划完成情况"><a href="#年初规划完成情况" class="headerlink" title="年初规划完成情况"></a>年初规划完成情况</h2><p>年初立的<code>flags</code></p><ul><li>自媒体：</li><li>看书计划：</li><li>工作格外：</li><li>金融：</li><li>电子商务：</li><li>个人：</li></ul><p>先罗列完成情况，整体完成度是很低的，这个说明年初的目标和行动项，并没有很好的落实掉；根源到底是因为说明呢？没有时间，不够自律，缺乏恒心？都是，但是需要找到克服的方法，自律恒心这些觉得不是让自己感觉到痛苦，感觉到痛苦，下场肯定是放弃的；需要找到明确的目标和激情，如果是自己的真正兴趣所在，是会享受这个过程，而不是感觉无法坚持；</p><p>我觉得最大的问题，就是长期轻信了中国填鸭式教育的影响，一起强调的勤奋、努力其实不能在真正意义上，带来个人的成功，并不是说我可以不用勤奋、不用努力，确切的说是缺少正确的努力方式。首先思维上就需要转变，用兴趣需求去驱动，还要明确真正的目标到底是什么。</p><p>对于<code>2022</code>年的计划，需要更加聚焦，要明确选择出最重要，最渴望达成的目标到底是什么？这个目标排除掉客观的影响外，自己需要完成和达成的有没有达成，有没有具体的细化可操作性目标点，否则容易陷入焦虑，然后会导致拖延，最后就肯定不了了之，因为自己根本不想去接触，大脑的意愿为强烈对抗状态，而且越逼迫自己，越形成大脑固有惯性，就好像一直在训练它说我不喜欢这个，我完成不了这个，到最后就是一听到这个任务就立马放弃，这个逻辑也是符合进化论，还有大脑思维的。总结下就是 1.目标需要更加聚焦 2. 完成自己能完成的所有努力，并记录过程中的成长。3.还是要相信兴趣的力量，要积极的心态，之前觉得这个就是洗脑用的说法，当看到自由式滑雪运动员谷源爱的状态，采访发言，真切的可以体会到这点。</p><p>看书：真的很好，要培养成骨子里的习惯；任何时候开始都不晚；需要学会写总结，最理想的就是思维导图或者<code>PPT</code>的方式呈现；</p><p>知识体系建立，避免焦虑，聚焦目标；</p><p>工作上：</p><p>2021年下半年开始，也参与到部门<code>bmt</code>里面中，团队中加入了3个新成员，加上“毕业”（离职）一个成员，总共有8个人小团队，峰值的时候差不多算是人员最多的小组了。团队算是从组建期，进入磨合期，截止现在基本上要稳定发展快速创造价值和成绩的时候。回顾这一年的工作，从团队和工人来看，都是不太满意的；</p><p>个人成绩：B</p><p>家庭上：</p><p>家庭旅行一次；投入时间太少；夏天教育情况；早教，但是家庭教育不够</p><p>个人能力：</p><p>规划：</p><p>对于读书：学习知识管理类、学习方法；输出导图笔记或者ppt笔记</p><p>对于工作：</p><p>对于家庭：多投入到家庭中；夏天教育投入上需要加大；</p><p>对于个人能力：</p><p>职级上必须晋升拿下；专利和软著必须拿下；软考去拼；</p><p>养成读书，知识管理的习惯；</p><hr><ul><li><input disabled="" type="checkbox"> 自媒体<ul><li><input disabled="" type="checkbox"> 学写标题文案；计划：每周至少更新一篇头条文章</li><li><input disabled="" type="checkbox"> 学会拍视频和剪辑；计划：每两周至少更新一个视频</li></ul></li></ul><p><strong>完成情况：</strong></p><p>自媒体这块年初完成几个短视频上传，剪辑了一个<code>vlog</code>以后，没有更新任何文章，也没有</p><ul><li><input disabled="" type="checkbox"> 看书计划<ul><li><input disabled="" type="checkbox"> 《文案创作完全手册》</li><li><input disabled="" type="checkbox"> 《OKR》</li><li><input disabled="" type="checkbox"> 学会看书，然后写文章</li></ul></li></ul><p><strong>完成情况：</strong></p><p>利用微信读书在年末开始读书</p><ul><li><input disabled="" type="checkbox"> 工作格外<ul><li><input checked="" disabled="" type="checkbox"> 参加3月份公司的创新大赛</li><li><input disabled="" type="checkbox"> 每个季度至少提交一篇专利</li><li><input disabled="" type="checkbox"> 写一个小程序，<code>uniapp</code>就写时间管理类的就号；或每日打卡类的；一边学一边写笔记教程；甚至可以录视频。</li></ul></li></ul><p><strong>完成情况：</strong></p><p>专利输出不够</p><ul><li><input disabled="" type="checkbox"> 金融<ul><li><input disabled="" type="checkbox"> 学会看公司财报；输出笔记，就是思维导图也ok</li><li><input disabled="" type="checkbox"> 基金定投按形势定投</li><li><input disabled="" type="checkbox"> 夏天的教育基金规划起来</li><li><input disabled="" type="checkbox"> 虚拟货币玩玩，学习下合约的玩法</li></ul></li></ul><p><strong>完成情况：</strong></p><p>学习了思维导图和工作型ppt写法；</p><p>金融类玩法包括股票等没有投入太多，财报也没有学习</p><ul><li><input disabled="" type="checkbox"> 电子商务<ul><li><input disabled="" type="checkbox"> 亚马逊套利模式赋予实践</li><li><input disabled="" type="checkbox"> 国内电商开一下，比如小程序商城/拼多多</li></ul></li></ul><p><strong>完成情况：</strong></p><p>完全没有进行</p><ul><li><input disabled="" type="checkbox"> 个人<ul><li><input disabled="" type="checkbox"> 高级工程师职称（软考信息系统项目管理师）</li><li><input checked="" disabled="" type="checkbox"> 看房子继续摇号</li><li><input disabled="" type="checkbox"> 锻炼减肥，目标150，每周至少跑步一次</li></ul></li></ul><p><strong>完成情况：</strong></p><p>房子是在摇号的漩涡中；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册自己的公司</title>
      <link href="/zhu-ce-zi-ji-de-gong-si.html"/>
      <url>/zhu-ce-zi-ji-de-gong-si.html</url>
      
        <content type="html"><![CDATA[<h1 id="注册自己的公司"><a href="#注册自己的公司" class="headerlink" title="注册自己的公司"></a>注册自己的公司</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在各种跨境电商都需要用企业才能完成注册；所以罗列下如何注册一个公司。现在注册流程很简单，对于浙江省来说，只要在浙里办的<code>app</code>,或者在浙江政务网（<a href="http://www.zjzwfw.gov.cn/zjservice/front/index/page.do?webId=1）就可以在线注册，但是这里有一些不明白的实现，比如公司这么多类型，每种类型有什么区别？另外注册公司很简单，但是注册以后要注意什么?把不清楚的做下笔记。" target="_blank" rel="noopener">http://www.zjzwfw.gov.cn/zjservice/front/index/page.do?webId=1）就可以在线注册，但是这里有一些不明白的实现，比如公司这么多类型，每种类型有什么区别？另外注册公司很简单，但是注册以后要注意什么?把不清楚的做下笔记。</a></p><h2 id="公司类型"><a href="#公司类型" class="headerlink" title="公司类型"></a>公司类型</h2><p>首先主体分有限责任，和无限责任的。假设公司贷款贷了一亿，还不上要破产，这时，如果主体是无限责任，那创始人就要背上这笔债，如果是有限责任，就不用。<br>无限责任的主体包括个体工商户，合伙企业。<br>有限责任的就是有限责任公司，股份有限公司，一人有限公司等了。<br>但实际上现在公司借款常常是要个人担保的，所以区别可能更多是——公司听着更高大上，个体工商户听着就是小店铺。个体工商户和合伙企业在记账报税上面似乎要简单一些。此外，有些东西需要公司资质，比如搞个涉及支付的微信小程序。<br>有限公司里，一般不会选一人有限公司，因为：1. 出资至少 10 万且要一次付清，2. 如果不能证明公司财产独立于个人财产，要对公司债务承担连带责任。<br>（一人有限公司和有限责任公司是两种不同类型的公司，一人有限公司并不是指只有一个股东的有限责任公司，有限责任公司股东至少 2 人。）<br>股份有限公司，出资最少 500 万，一次至少缴清 20%，剩的两年内缴足。除了钱之外还有别的区别，但我相信不重要，如果重要的话，你们都有 500 万了，找一个会计问问就行。<br>剩下的就是有限责任公司，两个以上股东，出资金额无限制，什么时候缴清自己定，你可以成立 1 块钱公司，也可以注册资本 500 万但是一分钱都不出。<br>除了这些，还有其它类型的主体，比如国有企业，民办非营利机构，但是相信他们和大部分创业者都没啥关系。</p><h2 id="注册资金"><a href="#注册资金" class="headerlink" title="注册资金"></a>注册资金</h2><p>有限责任公司，现在是认缴制，也就是说账户上其实只要1快去也是每关系的。出资比例就是谁占股多少，和你的合伙人们自己讨论即可。公司法规定，分红按照实缴金额比例分红。公司登记管理条例规定，不得以劳务出资。也就是说，如果你是股东但不出钱只出力，法律上不支持你分红时拿钱。</p><h2 id="纳税人"><a href="#纳税人" class="headerlink" title="纳税人"></a>纳税人</h2><p>小规模纳税人，还是一般纳税人；对于初创的公司，一般都是小规模。这主要涉及增值税的计算方式不同。增值税是针对销售额的税。</p><p>假设你买了 50 块原料，加工后 100 块卖出去，付给工人 50 块工资，销售 100，成本 100，利润 0，这时候，针对这 100 块钱的销售额要交增值税，就算你没有赚钱。如果你赚钱了的话，针对你的利润部分还要交企业所得税。</p><p>小规模的增值税率一般是 3%，直接 100 x 3% = 3 块的增值税。</p><p>一般纳税人的增值税率按行业不同不一样，假设 17%，要交 100 x 17% = 17 块的增值税。但是，如果原料供应商给你开了增值税专用发票，票上 5 块的增值税，那么你实际要交的就是 17 - 5 = 12 块的增值税。</p><p>例子不一定正确，实际计算比这个要复杂得多。但基本上是这么个道理：小规模税率低，但不能拿成本发票抵扣增值税。一般纳税人税率高，可以拿成本的增值税专用发票（简称专票）抵扣增值税。</p><p>专票不是谁都能开的。小规模一般不能自己开，虽然能找税务局代开，但不一定会愿意。</p><p>一般纳税人是一定能开专票的。</p><p>所以如果你所在行业的供应商都是一般纳税人的话，你可能需要注册为一般纳税人，拿专票抵扣成本。或者如果你的客户一定要专票，也可以考虑一般纳税人。</p><p>此外，小规模纳税人的年销售额到了 500 万，也必须要转一般纳税人。（这是 19 年的新规定，之前是 100 万）</p><h2 id="公司注册的费用"><a href="#公司注册的费用" class="headerlink" title="公司注册的费用"></a>公司注册的费用</h2><p>注册不需要费用；公章这些是需要费用的；然后必须要报税；另外注销公司也是比较麻烦的事情。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册公司 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入图片无法显示问题</title>
      <link href="/hexo-cha-ru-tu-pian-wu-fa-xian-shi-wen-ti.html"/>
      <url>/hexo-cha-ru-tu-pian-wu-fa-xian-shi-wen-ti.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo文章中插入图片无法正常显示"><a href="#hexo文章中插入图片无法正常显示" class="headerlink" title="hexo文章中插入图片无法正常显示"></a><code>hexo</code>文章中插入图片无法正常显示</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>博客部署好以后，简单的文章都可以正常书写；用的多了，发现仅仅文字描述太干了，还是需要图文并茂的好；本以为<code>hexo</code>插入图片，就和普通的<code>md</code>写法一样，但是上传后发现无法显示；这里做问题解决的尝试和记录，目前还是没能完美解决，可能和开启了中文转拼音的插件有关</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>网上一堆的教程类似问题，但是都不能解决，很常见的说是写法需要用<code>assert</code>的方式，但是最新的<code>HEXO</code>，有很友好的插件支持；</p><ol><li><p>安装插件<code>hexo-renderer-marked</code></p><pre class=" language-shell"><code class="language-shell">npm install hexo-renderer-marked --save</code></pre></li><li><p>配置<code>_cofing.yml</code></p><pre class=" language-shell"><code class="language-shell">post_asset_folder: truemarked:  prependRoot: true  postAsset: true</code></pre><p>其中，<code>post_asset_folder</code>为<code>true</code>的作用是，在创建文章<code>hexo new</code>时候，会生成一个相同名字的文件夹；然后这篇文章中用到的图片都统一放在这个目录下即可；</p></li></ol><p><strong>结果：</strong></p><p>按照上面尝试了，还是无法正常显示，很是痛苦；</p><p>但是访问的时候，路径看起来是对的<br><code>data-src="2021-02-09-%E4%BA%9A%E9%A9%F/2.png"</code></p><p>点击图片的位置，虽然没显示，但是会出现<br><code>mo-shi.html#lg=1&amp;slide=0</code></p><p>文章的目录结构是：</p><pre class=" language-shell"><code class="language-shell">└─_posts    └─2020-02-09模式    |2020-02-09模式.md</code></pre><p>最后提了一个<code>issue</code>给主题作者，看看能不能帮忙解决</p><blockquote><p> <a href="https://github.com/blinkfox/hexo-theme-matery/issues/624" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/issues/624</a></p></blockquote><p>还有一个想法可以尝试，可以直接放到图床上，然后用外链显示；</p><p>这个风险就是外链可能会挂，本地也需要做好备份处理</p><p>可以使用的图床：</p><p>七牛云或者又拍云，但是这个两个都需要绑定已经备案的域名</p><blockquote><p><a href="https://portal.qiniu.com" target="_blank" rel="noopener">https://portal.qiniu.com</a></p><p><a href="https://www.upyun.com" target="_blank" rel="noopener">https://www.upyun.com</a></p></blockquote><p>路过图床</p><blockquote><p><a href="https://imgchr.com" target="_blank" rel="noopener">https://imgchr.com</a></p></blockquote><p><code>SM.MS图床</code></p><blockquote><p><a href="https://sm.ms" target="_blank" rel="noopener">https://sm.ms</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 图片显示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊套利模式</title>
      <link href="/ya-ma-xun-tao-li-mo-shi.html"/>
      <url>/ya-ma-xun-tao-li-mo-shi.html</url>
      
        <content type="html"><![CDATA[<h1 id="亚马逊套利模式"><a href="#亚马逊套利模式" class="headerlink" title="亚马逊套利模式"></a>亚马逊套利模式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解到一种亚马逊的经营模型，做为学习记录下；</p><p>插入图片</p><p>测试二：</p><p><img src="2021-02-09-%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%A5%97%E5%88%A9%E6%A8%A1%E5%BC%8F/2.png" alt=""></p><p>测试3:</p><p><img src="https://tse4-mm.cn.bing.net/th/id/OIP.mYBs-T9BgY4bSS17ezfI4QHaE8?pid=Api&amp;rs=1" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 套利模式 </tag>
            
            <tag> 亚马逊 </tag>
            
            <tag> 跨境电商 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年总结</title>
      <link href="/2020-nian-zong-jie.html"/>
      <url>/2020-nian-zong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="2020年度总结"><a href="#2020年度总结" class="headerlink" title="2020年度总结"></a>2020年度总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直希望自己能做到每年写一篇总结，不为别的，时光如梭，一年年的重复，一步步的成长，希望可以留点足迹下来；拖了很多年了，今天得空刚好写写<code>2020年</code>的总结；</p><p>2020年对世界上所有人而言，都会是印象深刻的一年，春节前夕新冠肺炎疫情席卷中国，武汉更是不得不封城抗疫；对于我个人来说，这是一个最为特殊的春节假期，封村封城，严格管控输入输出虽然痛苦，但是给了我更多的假期陪伴家人；回顾这一年，过的很匆忙，但是却很充实，疫情的影响把时间压缩了。祸不单行的是老美对中国的不断打压，国内芯片供应大大受阻，作为攻城狮就需要解除不同的芯片来度过这个难关，所以工作上异常的忙碌，压力很大；回顾了下过去一年，无非就是工作/家庭/自己，三点一线的生活轨迹；那就按这3点来写把。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p><code>2020</code>年算是我职场的转折点，5月份开始，逐步承担起带领团队的任务，从普通的技术人员转向技术类管理，是我职场规划的目标和方向，当然这意味着更大的责任和压力。下半年开始公司战略项目的投入，也让我连续作战，每天很繁忙，但是过的异常充实；付出总是会有回报的；我获得了研发中心<code>7~8月份</code>重大突破奖，在<code>1024程序员节晚会</code>上也是受到了嘉奖；也获得了<code>2020年度研发中心优秀个人</code>的荣誉称号；年度绩效也是为<code>S</code>；年初申请的专利提案也顺利通过了。荣誉是对我工作的肯定和认可，也是对我的鞭策，看着桌面上的奖杯，总觉得自己做的还不够好；</p><p>过去的一年，有收获，也有很大不足。放了较多的经历在带领团队上面，每天很忙碌，很疲惫，但是个人的技术投入，个人成长方面投入不够，没有拿的出手的东西，这是这一年工作中最大的不足。一个团队，要想有战斗力，要想能拼杀冲锋，头一定要足够强大，一定要足够果断睿智，这样才能服众，才能调兵遣将；年前的一个小需求，更是拖到现在也还没有完成；</p><p>总的看起来，<code>2020年</code>的工作就是忙碌，然后个人角色逐步转变，收获了很大荣誉和表彰，任务完成度，绩效表现看起来都不错，但是都已经过去，我需要从忙碌中抽身出来，看看自己，看看团队，不要用忙碌为借口去拖延，需要更有战斗力，更有执行力；要能体现个人的价值，要强话自己的品牌效应，拿出代表作来，寻求团队新的增长点。</p><h3 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h3><p>都说<code>30</code>而立，对我来说也真而立成家了。植树节的那天我们登记结婚了，她是很善良很敏感的女孩，从相识相恋相爱相知走到今天，有争吵，有嬉笑，义乌和杭州的距离把我们限制在微信视频中，周末短暂的相聚也是来去匆匆，用她的话说，“都没见面多久就又要回去了”，但是在<code>2020</code>年植树节，我们种下了属于我们俩爱情的种子，它会从爱情变为亲情，它会把本是没有交集的两条轨迹交织，它是一份承诺，一份信任，更是责任；</p><p>都说好事成双，“小夏天”也迫不及待的来了，得知老婆怀孕的那天激动的不行，既期待又迷茫，期待这小家伙的到来，迷茫不知道怎么样去保护这颗花蕾。后来老婆说：“你这个‘傻子’，那天晚上半夜睡觉做梦都在笑，笑什么都不知道！”，对比的反差是，老婆在知道怀孕后嚎啕大哭。生命真的是很神奇的事情，一点点长大，经历初期的孕吐的痛苦，到中晚期肚子越来越大，腰酸背痛，不过幸运的是，行动还是很轻便，老婆挺着大肚子走路比我都要快，哈哈。</p><p>在<code>2020年9月22号</code>，农历8月初六，刚好是秋分；前一天晚上有点见红，半夜赶紧送医院，要知道白天刚刚把迪士尼的乐高给拼好结顶了，听说快生了也有点突然，这个时候我还在加班，本来打算晚上就赶回去，但是太晚没有票了，第二天早上9点半才到医院。因为疫情，产区只能陪同一个人，我和丈母娘在外面等着，老婆自己走到门口，看到我以后抱着我痛哭，说实在太疼了，我抱着搀扶着回产区病床上，这时候裤子已经都是血了，护士检查后说已经开到四指了，赶紧推到产房待产。这时候大概是10点进入分娩中心，11点20分，女儿出生，1点20从分泌中心出来，老婆状态不错，就是脸色有点惨白，说是出血有点多。宝宝很可爱，第一天就以睡觉为主了，也不怎么哭闹，每隔2个小时喂一次奶，第一次喂奶小家伙可能还不怎么怎么吮吸母乳，喂一次费了九牛二虎之力，还找了好几次护士，护士说这是本能都会吸的，多试几次就好了。对于这小家伙，一切的一切都是小心翼翼的。<code>9月23号</code>小家伙今天饿了就开始哭，也会自己摆头，自己摇手，甚至还会啃衣服手指，很是可爱，凌晨一点开始喂奶，不知道是奶水不够还是什么原因，小家伙一直吮吸，时而烦躁，不愿意松口，一直持续到2点。第三天，因为黄疸高，去晒了3天蓝光；激动着急。一直到今天（正月初九），小家伙已经5个月多3天了，没有刚开始辛苦，很喜欢吃手指头，逗一下就会笑，老婆说，她就是我的大玩具，哈哈哈。希望小家伙在<code>2021</code>年里面健健康康的成长，学会越来越多的技能，比如说话/走路，为父也要更加努力赚奶粉钱。题外的，小家伙小名叫夏天，大名叫王思茗，叫夏天是因为出生刚好是秋分，其实是夏末了，比起秋天，老婆和老妈更喜欢夏天，然后也就叫夏天了，以后英文名直接叫<code>Summary</code>也不错呢；至于“茗”，是希望她可以慢慢绽放，健康快乐的成长。</p><p>总的看，2020年，结了婚，当了爸爸，初为人夫人父，开心激动，也备感到责任于压力；但是我知道我自己可以扛起这份责任。老婆也在年底来到了杭州，老妈也辛苦的过来带夏天，我们4个人蜗居在50平的小房间里，拥挤但是却很温馨，加班到半夜回来，也觉得确实是回家了，有锅碗瓢盆，有饭菜，还有干净清爽的地面，还有偶尔哭闹的小夏天，寂静的晚上，一切都很美，也许回归家庭才能真正慢下来把，可以偷个懒，刷刷头条。</p><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p>对于我个人，可以从几个方面来描述，物质（车，房，自己）/个人品牌（自媒体，技能）/金融（钱生钱的游戏）/商业（生钱途径）；个人的最求说白了就是希望能多赚钱，有钱了才能给家人自己生活的保障。听起来很是物质，但是确实是30岁的我每天脑子里的事情。</p><p><strong>物质：</strong></p><p>车，在7月中旬也提到人生中第一辆车，说来也是无奈，主要是杭州车票值钱，摇到了不想让它过期掉，对车的需求其他不大，感觉也是浪费，不过至少出行方便不少。</p><p>房，在12月中旬第一次参加了摇号，第一次见识到了什么叫不差钱，这个社会永远不缺有钱人，<code>4.9w</code>一平的房子，中签率低到3个点，我摇的这个红盘限价<code>3.75</code>也是快6000多号人摇，中签率4%；虽然没有中签，但是至少迈出了第一步。</p><p>自己，今年工作比较繁忙，对于自己其实亏待不少，体重指数上升，常常处于腰酸背痛的状态，这个希望能在21年里面重视起来，跑跑步跳跳绳，让自己锻炼流汗，身心都可以得到放松。</p><p><strong>个人品牌：</strong></p><p>技能，年初在家里，搭建了个人博客(<a href="https://www.lmwings.top/">https://www.lmwings.top/</a>) ,同时部署在<code>github/gitee/coding</code>上，可以利用<code>traivci</code>自动完成部署，只要专注于写文章，然后上次到<code>git</code>仓库中就好，做这个网站的初心是希望自己能有一个可以更新记录查看自己学习笔记文章的地方。一直以来，搭建过一年的论坛，而且还运营了一段时间，但是用的都是免费的空间，以至于打开超级缓慢，在后面刚才买了阿里云的空间和域名，搭建了<code>workpress</code>的博客，一切状态都可以，至少苦于每年服务器太贵了，几百块的投入也是没有必要，然后就不了了之了。今年疫情闲着在家，用1个星期的时间，搭建起来静态页面。但是后面一直也没有坚持更新。</p><p>自媒体，注册了微信公众号，说来惭愧，本意是为了找回公众号刚出的时候注册的账户，因为有留言功能，到现在怎么也可以卖个几千块钱了，只可惜没有登录的时间太长，被腾讯回收了，只能再注册个新的。至于更新内容嘛，一直没有想好要更新点什么，也就一直处于荒废状态。头条号，今年年终达到了注册时间1000天，但是截至目前原创文章也才发表了一篇，视频更加是从来没有更新过。自媒体的这条路，其实是我自己一直都很想做，但是却一直没能坚持走下去的路，可能是自己太过浮躁了，只看到了社群的魅力，看到了社群电商的恐怖带货能力，却没有看到他们背后的82法则，没有看到这也是一门学问。是广告营销学的方向，是个人文笔/号召力的表现。这一块做的确实太过于浮躁了，希望在<code>21</code>年，自己可以踏踏实实的学好一个方向，比如怎么样写标题文案，怎么样拍视频剪辑视频。</p><p><strong>金融：</strong></p><p>钱，理财方面，坚持了基金定投，可惜风格太过于保守，到6月份，大盘上升就没有定投了，全年是慢牛状态，基金收益表现很好，股市也从年初3200点到年末3700年，今年几个板块大涨，比如白酒/消费/医疗/军工/芯片都涨幅不少；这一部分投入的资金不多，整体的收益也无光痛痒。</p><p><strong>商业:</strong></p><p>年初发现亚马逊有一个模式，叫套利模式，在线<code>OA</code> 在国外很火的，年初国内很少有资料，但是年底资料已经很多了，自己也尝试了申请亚马逊账户，但是一直没有通过，后面也就没有继续进行。主要逻辑就是卖国外的货物，然后发到第三方参考，通过FBA进行售卖，主要考验选品能力。</p><p>总的看，比较浮躁，想的很大，看的很大，野心很大，但是眼高手低，实际回报很少，主要是投入不够，这个社会是快速变化的社保，新的东西层出不穷，比如电商，本来以为淘宝京东可以独挡好几年，没想到杀出来个拼过多多，市价比京东还高，本以为也不会再有抗衡的了，没想到直播带货，抖店快手等短视频平台席卷，刮风天下，如今社区团购，社区电商玩法千奇百怪。用于试错，小步快跑的模式是全社会全行业的通识了。所以要学会取舍，指定好比较清晰的目标，并且细化几步走，然后就去做，不要害怕什么，失败了没什么，成功了就赚到了，应该要有这种魄力和勇气，否则会被时间和现实束缚，越到后面越无法行动。</p><h2 id="新年规划"><a href="#新年规划" class="headerlink" title="新年规划"></a>新年规划</h2><p>一起过往皆为序章，不平凡的2020过去，新的2021到了；不平常的鼠年转眼溜走了，老黄牛踏实的走来，新年需要有新的计划，需要立下新的<code>flag</code>。</p><ul><li><input disabled="" type="checkbox"> 自媒体<ul><li><input disabled="" type="checkbox"> 学写标题文案；计划：每周至少更新一篇头条文章</li><li><input disabled="" type="checkbox"> 学会拍视频和剪辑；计划：每两周至少更新一个视频</li></ul></li><li><input disabled="" type="checkbox"> 看书计划<ul><li><input disabled="" type="checkbox"> 《文案创作完全手册》</li><li><input disabled="" type="checkbox"> 《OKR》</li><li><input disabled="" type="checkbox"> 学会看书，然后写文章</li></ul></li><li><input disabled="" type="checkbox"> 工作格外<ul><li><input disabled="" type="checkbox"> 参加3月份公司的创新大赛</li><li><input disabled="" type="checkbox"> 每个季度至少提交一篇专利</li><li><input disabled="" type="checkbox"> 写一个小程序，<code>uniapp</code>就写时间管理类的就号；或每日打卡类的；一边学一边写笔记教程；甚至可以录视频。</li></ul></li><li><input disabled="" type="checkbox"> 金融<ul><li><input disabled="" type="checkbox"> 学会看公司财报；输出笔记，就是思维导图也ok</li><li><input disabled="" type="checkbox"> 基金定投按形势定投</li><li><input disabled="" type="checkbox"> 夏天的教育基金规划起来</li><li><input disabled="" type="checkbox"> 虚拟货币玩玩，学习下合约的玩法</li></ul></li><li><input disabled="" type="checkbox"> 电子商务<ul><li><input disabled="" type="checkbox"> 亚马逊套利模式赋予实践</li><li><input disabled="" type="checkbox"> 国内电商开一下，比如小程序商城/拼多多</li></ul></li><li><input disabled="" type="checkbox"> 个人<ul><li><input disabled="" type="checkbox"> 高级工程师职称（软考信息系统项目管理师）</li><li><input disabled="" type="checkbox"> 看房子继续摇号</li><li><input disabled="" type="checkbox"> 锻炼减肥，目标150，每周至少跑步一次</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab/gitlab-runner离线环境部署</title>
      <link href="/gitlab-gitlab-runner-chi-xian-huan-jing-bu-shu.html"/>
      <url>/gitlab-gitlab-runner-chi-xian-huan-jing-bu-shu.html</url>
      
        <content type="html"><![CDATA[<h1 id="gitlab-gitlab-runner离线环境部署"><a href="#gitlab-gitlab-runner离线环境部署" class="headerlink" title="gitlab/gitlab-runner离线环境部署"></a><code>gitlab/gitlab-runner</code>离线环境部署</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实际开发中会用到很大持续集成的框架，目前和代码托管平台一起使用的，使用到比较多的情况是</p><blockquote><p>github + Travis CI</p><p>gitlab + gitlab CI</p></blockquote><p>如果使用<code>github</code>，一般开源的项目，可以使用，而且使用的比较广泛；使用<code>gitlab</code>的好处是，可以在自己本地搭建<code>gilab</code>以及对于的<code>ci</code>服务，这样对于公司来说更加安全，保密性更好。</p><p><strong>名词解释</strong></p><p><code>gitlab</code>: 代码托管平台。有对于网站，也有安装好环境的<code>docker image</code></p><p><code>gitlab-runner</code>: 其实就是<code>ci</code>服务的载体，比如我上传更新了代码，这时候需要<code>ci</code>开始工作，可能是去编译，也可能是<code>ssh</code>连接过去运行，而编译运行的环境，其实就是gitlab-runner`提供的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>都使用<code>docker</code>进行搭建，提前<code>docker pull</code>好镜像，这里主要是两个</p><ul><li><code>gitlab-ce</code></li><li><code>gitlab-runner</code></li></ul><p>镜像可以在<code>docker hub</code>上搜，也可以在阿里云开发者里面的镜像库里面获取。</p><p>具体命令以及步骤</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class=" language-shell"><code class="language-shell">docker run -it -d --name=gitlab -v /home/wkang/code:/Code -p 8035:22 -p 8082:8082 -p 8083:80 --privilegd=true gitlab/gitlab-ce:12.4.1-ce.0 /assets/wrapper bash</code></pre><p>这里需要注意，别忘记添加启动脚本启动命令<code>/assets/wrapper</code></p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><pre class=" language-shell"><code class="language-shell"># 进入 dockerdocker exec -it gitlab bashvim /etc/gitlab/gitlab.rb# 修改内容external_url 'http://10.1.1.205:8082'# 搜索 GitLab Sidekiq 新增sidekiq['concurrency'] = 15# postgresql['log_line_prefix'] = "%a"postgresql['max_worker_processes'] = 4# postgresql['max_worker_processes'] = 8# 取消注释，修改端口和上面配置的一致### Advanced settings# unicorn['listen'] = 'localhost'unicorn['port'] = 8082</code></pre><h3 id="配置更新"><a href="#配置更新" class="headerlink" title="配置更新"></a>配置更新</h3><pre class=" language-shell"><code class="language-shell">gitlab-ctl reconfiguregitlab-ctl restart</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这里有个坑，如果按上面的设置，理论上应该使用<code>http://10.1.1.205:8082</code>进行访问，然后设置默认的<code>root</code>密码即可，但是一直没有成功，提示邮箱为空，使用我这里端口就使用<code>8083</code>,因为启动使用映射到了<code>80</code>端口，而如果不对<code>gitlab</code>进行设置的化，默认都是<code>80</code>端口。</p><p>第一次访问，提示要求设置<code>root</code>账号的密码，我这里随便设置，就设置成<code>12345678</code></p><p>如果忘记了管理员密码，可以到后台进行设置</p><pre class=" language-shell"><code class="language-shell">cd /opt/gitlab/bin && gitlab-rails console productionu=User.where(id:1).firstu.password=`12345678`u.password_confirmation=`12345678`u.save!exit</code></pre><p>一般使用时候，不直接用管理员账号，所以重现注册一个新的账号<code>wkang</code>，密码也为<code>12345678</code></p><p> 到这里，其实以及在本地搭建好了代码托管服务了，如果只需要使用代码托管，现在就可以使用了。</p><h2 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h2><p>在上面搭建好的服务上，直接访问<code>http://{ip}:8083</code>，登录之前注册的账号，就可以创建项目仓库了。步骤流程就和普通的<code>git仓库创建</code>一样，填入项目名，以及对于的描述信息。</p><p>一般会添加<code>README.md</code>/<code>.gitlab-ci.yml</code>/<code>.gitinore</code>等文件，分别用来描述说，执行自动持续集成脚本，忽略上次的一些文件等。</p><p>其中，在<code>gitlab</code>上，<code>.gitlab-ci.yml</code>配置完上传后，会提升是否正确。</p><p><strong>重点：脚本编写规则可以学习下。</strong></p><h2 id="配置gitlab-runner"><a href="#配置gitlab-runner" class="headerlink" title="配置gitlab-runner"></a>配置<code>gitlab-runner</code></h2><p>我们的本地环境，如果也想支持<code>ci</code>功能，即有代码提交到<code>git</code>上，就能自动触发编译测试，达到验证和持续集成的目的，那么本地就必须安装<code>gitlab-runner</code>环境。</p><p>可以在和<code>gitlab-ce</code>在同一台服务器，也可以不同，一般会选择搭建在不同的服务器上，因为<code>gitlab-runner</code>是编译运行测试的环境，会比较耗费系统资源。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>启动<code>gitlab-runner</code>的环境，其中<code>/var/run/docker/sock</code>是固定的，这个是通过暴露的<code>docker.sock</code>文件接管容器。另外不要加<code>bash</code>，会报错。</p><pre class=" language-shell"><code class="language-shell">docker run -d --name gitlab-runner --restart always -v /home/wkang/test/gitlab/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-rnner:v12.4.1</code></pre><p>其中，<code>/home/wkang/test/gitlab/gitlab-runner/config</code>是<code>docker</code>外的主机环境下建立的目录，主要是为了保存配置信息，这样即使<code>docker</code>容器挂掉了，配置数据还在。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>安装好以后，还是用不了的，这个才仅仅是提供一个基础的环境。需要进行注册，注册以后，<code>gitlab</code>上才会出现<code>runner</code> 列表。注册之前，需要在<code>gitlab</code>上得到<code>url</code>和密钥</p><ol><li><p>进入自己的项目仓库，然后点击右侧的<code>Settings</code>, 选择<code>CI/CD</code>，点击<code>Runners</code>的<code>Expand</code>按钮，在出现的页面中有如下页面就是需要的信息。</p><pre class=" language-shell"><code class="language-shell">Set up a specific Runner manually1. Instal Gitlab Runner2. Specify the following URL during the Runner setup: http://10.1.1.205:8083/3. Use the following registration token during setup: LUsa7tcYtpGBGzJ-EjU4.Start the Runner!</code></pre></li><li><p>进入<code>gitlab-runner</code>的<code>docker</code>交互模式</p><p> <code>docker exec -it gitlab-runner bash</code></p><p>输入命令，按提示和说明一步步填写</p><p><code>gitlab-runner register</code></p><p>也可以使用一条命令完成注册</p><pre class=" language-shell"><code class="language-shell">gitlab-runner register \  --non-interactive \  --url "http://10.1.1.205:8083/" \  --registration-token "LUsa7tcYt5pGBGzJ-EjU" \  --executor "docker" \  --docker-image alpine:latest \  --description "docker-runner" \  --tag-list "docker, aws" \  --run-untagged= "true" \  --locked="false" \  --access-level="not_protected"</code></pre><p>注册完成后，有些信息可以在<code>gitlab</code>的界面上修改，比如<code>tag-list/description</code>等。</p><p><strong>注：</strong>这里的<code>tag-list</code>要注意，如果要想使用这个<code>runner</code>， 在<code>.gitlab-ci.yml</code>文件中，必须要有<code>tags</code>标签，且名字为列表中的，否则无法使用；另外<code>executor</code>表示执行的方式，如果使用<code>ssh</code> 就可以在不同的设备上运行测试代码了。</p></li><li><p>查看本地注册情况</p><p>可以在<code>gitlab</code>界面上<code>Setting/CI/CD/Runners</code>查看，注册情况，也可以直接运行</p><pre class=" language-shell"><code class="language-shell">gitlab-runner list# 如果没有运行，可以手动启动下gitlab-runner start# 如果有多个Runner，可以使用下面的命令，一起启动多个gitlab-ci-multi-runner run</code></pre></li><li></li></ol><h2 id="完整使用例子"><a href="#完整使用例子" class="headerlink" title="完整使用例子"></a>完整使用例子</h2><p><strong>待补充，可以把hexo自动部署这个当例子。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> gitlab </tag>
            
            <tag> gitlab-runner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm远程调试配置</title>
      <link href="/pycharm-yuan-cheng-diao-shi-pei-zhi.html"/>
      <url>/pycharm-yuan-cheng-diao-shi-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pycharm远程调试配置"><a href="#Pycharm远程调试配置" class="headerlink" title="Pycharm远程调试配置"></a><code>Pycharm</code>远程调试配置</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用<code>Pycharm</code>来作为<code>python</code>开发的<code>IDE</code>是很好的选择，使用起来特别方便。但是 在<code>windows</code>上<code>python</code>有时候环境搭建笔记麻烦，当然我们可以选择直接安装<code>anaconda</code>,然后需要使用到什么库，我们就安装哪些库。这样就可以在本地进行开发调试。不过这个并非是最佳的选择。</p><p>对于<code>windows</code> 上，主要用来编写文档，查看编辑代码，而对于开发环境，一般都会部署到<code>docker</code>的<code>linux</code>环境中，然后通过远程进行调试开发。最常见的就是使用<code>ssh</code>远程连接过去，这样就可以不需在<code>windows</code>上安装过多的依赖库。</p><p>下面就记录一下，<code>Pycharm</code>如何配置远程调试，这里以<code>ssh</code>为例，其他方式也都类似。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>进入到<code>docker</code> (映射8022端口到22端口)</p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name=ubuntu_python -v /home/wkang/code:/Code -v /tmp/share:/tmp/share -p 9490:9090 -p 19490:19090 -p 8022:22 --privileged=true ubuntu18.04-caffe:latest bash </code></pre><p>这里就是正常的启动<code>docker</code>镜像，<code>-v</code>是把主机的目录映射到镜像内的目录，<code>-p</code>是把主机的端口映射到镜像内的端口，这里主要是把<code>22</code>端口映射出来，因为<code>ssh</code>连接的默认端口就是<code>22</code></p><p><strong>查看8022到22端口是否映射成功：</strong><code>docker port ubuntu_pyton 22</code></p></li><li><p>安装<code>openssh-server</code></p><pre class=" language-shell"><code class="language-shell">apt updateapt-get install openssh-server</code></pre></li><li><p>设置<code>openssh</code>允许<code>root</code>用户登录</p><p>（不想用<code>root</code>的，可以不需要设置，我是偷懒，用<code>root</code>比较方便，当然也不安全。）</p><pre class=" language-shell"><code class="language-shell">passwd 【首先设置root账号密码】【输入需要设置的root密码，我这里设置为： root】sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config 【运行root用户登录，替换PermitRootLogin 为 yes】sed -i '/PermitRootLogin yes/s^#//' /etc/ssh/sshd_config 【如果有注释符`#`删除】sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd 【修改ssh安全限制，取消pam限制】service ssh restart 【重启ssh服务】</code></pre></li><li><p>测试是否可以连接上</p><pre class=" language-shell"><code class="language-shell">netstat -lssh -p 8022 root@10.1.1.205sftp -P 8022 root@10.1.1.205</code></pre></li><li><p>特殊情况</p><p>在使用镜像<code>tensorflow-gpu</code>出现的该问题</p><p>发现<code>ssh</code>可以连接上，但是<code>sftp</code>连接上即会报错<code>Received message is too long: 458961206</code>, 主要是<code>.bash_profile</code>和<code>.bashrc</code>输出太多，解决办法</p><pre class=" language-shell"><code class="language-shell"># 找到输出源 /etc/bash.bashrcmv bash.bashrc bash.bashrc.bak</code></pre></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> python </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows上安装docker</title>
      <link href="/windows-shang-an-zhuang-docker.html"/>
      <url>/windows-shang-an-zhuang-docker.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows上安装docker"><a href="#Windows上安装docker" class="headerlink" title="Windows上安装docker"></a><code>Windows</code>上安装<code>docker</code></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>docker</code>很方便，不用维护很多个虚拟机，电脑本身性能有限，<code>docker</code>提供了类似的虚拟化功能，工作中一般都是部署在<code>linux</code>环境上，回家电脑上是<code>windows 10</code>,所以也想安装一个。但是怎么样在<code>windows</code>上安装<code>docker</code>? <code>github hub</code>速度很慢，怎么样才能在国内快速下载到有用的镜像呢？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p> <a href="https://blog.csdn.net/u013408188/article/details/102949225" target="_blank" rel="noopener">https://blog.csdn.net/u013408188/article/details/102949225</a></p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>安装完以后，要设置国内代理，可以加速<code>docker image</code>的加载速度。</p><h2 id="路径设置"><a href="#路径设置" class="headerlink" title="路径设置"></a>路径设置</h2><ol><li>镜像的安装路径为<code>C:\ProgramData\DockerDesktop\vm-data</code></li></ol><p>安装镜像多了，<code>c盘</code>的空间越来越小，所以这里把这个移动到<code>d盘</code></p><p>方法</p><pre class=" language-shell"><code class="language-shell"># step1:删除原来c盘的目录# step2：建立软连接mklink /J "C:\ProgramData\DockerDesktop\vm-data" I:\docker_img</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>由于正常的<code>docker hub</code>上网速较慢，这个可以用阿里云的<code>容器镜像服务</code></p><p>这里，先登入阿里云官网，登录账号以后，搜索<code>容器镜像服务</code>.</p><p>在镜像中心里面，镜像加速器中可以看到加速器地址，这个可以设置到<code>docker in windows</code>里面;</p><p>在镜像搜索里面，可以搜索需要的镜像，点击需要的镜像，内部有 公网地址/经典网络/专有网络 的路径，用这个地址<code>docker pull</code> 速度比较快。</p><ol><li><p>我这里下载的镜像是<code>ubuntu_python3</code>公网地址是</p><p><code>registry.cn-hangzhou.aliyuncs.com/ubuntu18_04/ubuntu_python3</code></p></li></ol><h3 id="启动及配置ubuntu环境"><a href="#启动及配置ubuntu环境" class="headerlink" title="启动及配置ubuntu环境"></a>启动及配置<code>ubuntu</code>环境</h3><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre class=" language-shell"><code class="language-shell">docker run -d -it --name ubuntu18 -p 8022:22 a95f0bed5864 bash</code></pre><p> 其中，<code>ubuntu18</code>是容器名，<code>a95f0bed5864</code>这个是对应的镜像，也可以直接写名称；</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><pre class=" language-shell"><code class="language-shell">docker exec -it ubuntu18 bash</code></pre><h4 id="配置ubuntu环境"><a href="#配置ubuntu环境" class="headerlink" title="配置ubuntu环境"></a>配置<code>ubuntu</code>环境</h4><ol><li><p>配置<code>ifconfig</code></p><p><code>apt-get install net-tools</code></p></li><li><p>一般需要更新下源</p><p><code>apt-get update</code></p></li><li><p>安装<code>curl</code></p><p><code>apt-get install curl</code></p></li><li></li></ol><h3 id="利用docker-compose启动多个镜像"><a href="#利用docker-compose启动多个镜像" class="headerlink" title="利用docker compose启动多个镜像"></a>利用<code>docker compose</code>启动多个镜像</h3><p>上面是启动一个镜像，但是实际开发学习过程中会遇到很多个环境问题，每个都需要这样手都的去启动简直就是痛苦，是不是有统一的启动方式呢？是有的，<code>docker compose</code>就可以干这个事情；也有一些<code>docker ui</code>比如<code>portainer</code>来干这个事情；</p><p><strong><code>docker compose</code>使用</strong></p><blockquote><p><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-compose.html</a></p></blockquote><p>再<code>linux</code>上，需要需要使用，需要单独安装<code>docker-compose</code>工具，而<code>windows</code>上不需要，本身<code>docker Toolbox</code>已经携带了。</p><p>主要通过<code>docker-compose.yml</code>配置文件，加启动命令完成。</p><p><strong>启动命令：</strong></p><p>在有<code>docker-compose.yml</code>文件的目录下启动</p><pre class=" language-shell"><code class="language-shell">docker-compose up#后台启动docker-compose up -d#停止docker-compose stop</code></pre><p><strong>配置说明</strong></p><p>一个最简单的配置示例</p><pre class=" language-yml"><code class="language-yml">version: '3'services:    python:        image: "ubuntu18_python3:v1"        command: bash</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用常用命令</title>
      <link href="/docker-shi-yong-chang-yong-ming-ling.html"/>
      <url>/docker-shi-yong-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker使用常用命令"><a href="#docker使用常用命令" class="headerlink" title="docker使用常用命令"></a><code>docker</code>使用常用命令</h1><blockquote><p><a href="https://www.w3cschool.cn/docker/docker-nx3g2gxn.html" target="_blank" rel="noopener">https://www.w3cschool.cn/docker/docker-nx3g2gxn.html</a></p></blockquote><h2 id="1-镜像使用"><a href="#1-镜像使用" class="headerlink" title="1.镜像使用"></a>1.镜像使用</h2><ol><li><p>列出主机上的镜像</p><pre class=" language-shell"><code class="language-shell">docker images</code></pre></li><li><p>搜索镜像</p><pre class=" language-shell"><code class="language-shell">docker search ubuntu18.04</code></pre></li><li><p>下载镜像</p><pre class=" language-shell"><code class="language-shell">docker pull brcloudproject/ubuntu18.04-mpich</code></pre></li><li><p>启动镜像</p><pre class=" language-shell"><code class="language-shell">docker run -d -it --name ubuntu -p 8022:22 ubuntu18.04 bash</code></pre></li><li><p>启动</p><pre class=" language-shell"><code class="language-shell">docker exec -it ubuntu bash</code></pre></li><li><p>查看日志</p><pre class=" language-shell"><code class="language-shell">docker logs -f 容器名 </code></pre></li><li><p>调试重启</p><pre class=" language-shell"><code class="language-shell">docker restart 容器名</code></pre></li><li><p>进入容器，查看</p><pre class=" language-shell"><code class="language-shell">docker exec -it 容器名 bashexit 【推出容器，但是容器后台还是在运行中】</code></pre></li><li><p>停止运行容器</p><pre class=" language-shell"><code class="language-shell">docker stop 容器名</code></pre></li><li><p>删除容器</p><pre class=" language-shell"><code class="language-shell">docker rm 容器名</code></pre></li><li><p>查看容器中的映射端口</p><pre class=" language-shell"><code class="language-shell"># 会显示 容器 中 9090端口 主机上是什么端口映射过来的docker port 容器名 9090 </code></pre></li><li><p>编译<code>dockerfile</code>文件</p><pre class=" language-shell"><code class="language-shell">docker build -t ubuntu18.04-image -f ubuntu18.04.Dockerfile .</code></pre><p><code>-t</code>后面是<strong>镜像名：标签</strong>；<code>-f</code>后面为<strong><code>dockerfile目录</code></strong> ；最后的<code>.</code> 表示生成到当前目录。</p></li><li><p>保存镜像</p><pre class=" language-shell"><code class="language-shell"># 把myimage镜像保存成tar文件docker save myimage | bzip2 -9 -c> /home/save.tar.bz2</code></pre></li><li><p>加载镜像</p><pre class=" language-shell"><code class="language-shell"># 加载myimage镜像bzip2 -d -c < /home/save.tar.bz2 | docker load </code></pre></li><li><p>查看镜像</p><pre class=" language-shell"><code class="language-shell">docker images</code></pre></li><li><p>给镜像打<code>tag</code></p><pre class=" language-shell"><code class="language-shell"># tag 后为原来的镜像名；后面的为现在要命名的 镜像名:标签号docker tag ubuntu18.04-image ubuntu18.04-image:v1</code></pre></li><li><p>删除一个<code>tag</code></p><pre class=" language-shell"><code class="language-shell">docker rmi ubuntu18.04-image:v1</code></pre></li><li><p>从容器中创建一个新的镜像</p><pre class=" language-shell"><code class="language-shell">docker commit#举例： -a表示提交的作者，-m表示提交的说明；b101c1c114a2是容器；最后是保存的镜像名和标签docker commit -a "lmwings" -m "test commit" b101c1c114a2  myimage:v1 # 可以看到输出sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057runoob@runoob:~$ docker images myimage:v1REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmyimage             v1                  37af1236adef        15 seconds ago      329 MB</code></pre></li><li><p>登录<code>docker hub</code></p><pre class=" language-shell"><code class="language-shell">docker login</code></pre></li><li><p>重命名镜像</p><pre class=" language-shell"><code class="language-shell"># 这里将ubuntu18镜像重命名为lmwings/Ubuntu18:v1docker tag ubuntu18 lmwings/Ubuntu18:v1</code></pre></li><li><p>推送到<code>docker hub</code>上去</p><pre class=" language-shell"><code class="language-shell">#没有v1那就是默认laster最新的版本docker push lmwings/Ubuntu18:v1</code></pre></li><li><p>删除本地的镜像</p><pre class=" language-shell"><code class="language-shell">docker rmi lmwings/Ubuntu18:v1</code></pre><p>记录一个可能会删除失败的处理方法；</p><p>一种是做了重命名的，也就是看到id是一样的，这个时候删除需要原始的那个，正常就是越后面那个；</p><p>另一种失败是做了挂载映射目录，需要想找到映射目录，然后删掉：</p><pre class=" language-shell"><code class="language-shell">cat /proc/mounts | grep "docker"# 删除挂载的，实际的时候路径是不一样的umout /var/lib/docker/containersrm -rf /var/lib/dockersystemctl start docker</code></pre></li><li><p>的</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo SEO优化</title>
      <link href="/hexo-seo-you-hua.html"/>
      <url>/hexo-seo-you-hua.html</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO-SEO优化"><a href="#HEXO-SEO优化" class="headerlink" title="HEXO SEO优化"></a><code>HEXO SEO</code>优化</h1><p>为了让网站已经文章可以让搜索引擎更加友好，需要做一些<code>SEO</code>优化</p><h2 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h2><ol><li><p>安装<code>sitemap</code></p><pre class=" language-shell"><code class="language-shell"># 生成sitemap.xml适合提交给谷歌搜索引擎npm install hexo-generator-sitemap --save# 生成baidusitemap.xml适合提交给百度搜索引擎npm install hexo-generator-baidu-sitemap --save</code></pre><p>顺便也要在<code>travis CI</code>的执行脚本也加上，我这里都写在了<code>travis_env_init.sh</code></p></li><li><p>在根目录<code>_config.yml</code>中添加代码</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 自动生成sitemap</span><span class="token key atrule">sitemap</span><span class="token punctuation">:</span><span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span><span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml</code></pre></li><li><p>执行<code>hexo g</code> 以后生成网站地图</p><p>会在<code>/public</code>目录下生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>, 这个就是我们的网站地图。</p></li><li><p>提交<code>sitemap</code>到站长平台</p><p>（1）百度提交到百度站长平台</p><p>（2）谷歌递交到 <a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google Search Console</a> </p><p>这个要进行验证，一种是DNS域名所有权验证，和平台域名添加解析一样，也就是设置<code>txt</code>解析，主机记录填写<code>@</code>即可，但是如果之前设置了<code>@</code>的都需要删除掉，否则就会冲突。这个验证的好处是，无论是主域名还是子域名，以及<code>https/http</code>都不需要重复添加验证；另一个就是可以提交目录了，这个需要添加哪个就加哪个；我这里为了方便，就选择了<code>DNS域名所有权验证</code>。</p></li></ol><h2 id="添加蜘蛛协议robots-txt"><a href="#添加蜘蛛协议robots-txt" class="headerlink" title="添加蜘蛛协议robots.txt"></a>添加蜘蛛协议<code>robots.txt</code></h2><pre class=" language-shell"><code class="language-shell">User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Allow: /about/Allow: /contact/Allow: /friends/Disallow: /js/Disallow: /css/Disallow: /medias/Disallow: /libs/Sitemap: https://www.lmwings.top/sitemap.xmlSitemap: https://www.lmwings.top/baidu_sitemap.xml</code></pre><p>貌似如果把<code>js/css</code>这些<code>disallow</code>话，谷歌抓取会有问题，所有实际用我吧这些<code>disallow</code>都去掉了。</p><h2 id="给出站链接添加nofollow标签"><a href="#给出站链接添加nofollow标签" class="headerlink" title="给出站链接添加nofollow标签"></a>给出站链接添加<code>nofollow</code>标签</h2><p><code>nofollow</code>标签是”反垃圾链接”的标签。 引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重 。</p><p><strong>（未操作）</strong></p><h2 id="给文章添加关键字和描述"><a href="#给文章添加关键字和描述" class="headerlink" title="给文章添加关键字和描述"></a>给文章添加关键字和描述</h2><p>在每一篇文章头中，最好添加<code>keywords</code>和<code>descripiton</code>，这样可以方便搜索引擎知道这是什么。</p><h2 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h2><p><code>hexo</code>默认文章链接是<code>web/year/moth/day/postname</code>，这个是一个四级<code>url</code>，正常搜索引擎友好的链接是<code>web/postname</code>，即二级的<code>url</code>， 修改根目录下<code>_config.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.html<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span>pretty_urls<span class="token punctuation">:</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运营维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加Gitalk评论插件</title>
      <link href="/tian-jia-gitalk-ping-lun-cha-jian.html"/>
      <url>/tian-jia-gitalk-ping-lun-cha-jian.html</url>
      
        <content type="html"><![CDATA[<h1 id="添加Gitalk评论插件"><a href="#添加Gitalk评论插件" class="headerlink" title="添加Gitalk评论插件"></a>添加<code>Gitalk</code>评论插件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看到很多博客，都有留言功能，<code>hexo</code>搭建的静态博客是不是也可以实现类似的功能。一查发现有很多类似插件，但是评论比较好的是<code>Gitalk</code>插件，需要评论者使用<code>github</code>账号登录，而且访问速度也比较快。</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p><code>Gitalk</code>使用<code>github</code>账号登录，支持<code>MarkDown</code>语法。</p><p><code>Gitalk</code>是利用<code>Github API</code>，基于<code>Github issue</code>和<code>Preact</code>开发的评论插件，也就是如果有用户进行评论，其实就是在对应的<code>issue</code>上提问题。</p><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>最标准的还是看官方教程说明</p><blockquote><p> <a href="https://github.com/gitalk/gitalk#install" target="_blank" rel="noopener">https://github.com/gitalk/gitalk#install</a> </p></blockquote><p>说明很简洁，也就3步。</p><ol><li><p>增加一个<code>div</code>在我们的页面(<code>page</code>)上</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gitalk-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>然后使用<code>javascript</code>代码生成<code>gitalk</code>插件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  clientID<span class="token punctuation">:</span> <span class="token string">'GitHub Application Client ID'</span><span class="token punctuation">,</span>  clientSecret<span class="token punctuation">:</span> <span class="token string">'GitHub Application Client Secret'</span><span class="token punctuation">,</span>  repo<span class="token punctuation">:</span> <span class="token string">'GitHub repo'</span><span class="token punctuation">,</span>  owner<span class="token punctuation">:</span> <span class="token string">'GitHub repo owner'</span><span class="token punctuation">,</span>  admin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  id<span class="token punctuation">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Ensure uniqueness and length less than 50</span>  distractionFreeMode<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// Facebook-like distraction free mode</span><span class="token punctuation">}</span><span class="token punctuation">)</span>gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span></code></pre><p>配置参数有很多，大部分时候，只要关注主要的几个即可。</p><ul><li><code>clientID</code>:  <code>GitHub Application Client ID</code> 【需要一个 Github Application，后面说】</li><li><code>clientSecret</code>:  <code>GitHub Application Client Secret</code></li><li><code>repo</code>: <code>Github 仓库名</code> 【只要写参考名即可！存储评论issue的Github参考名（建议直接用GitHubPage的仓库名）】</li><li><code>owner</code>: <code>Github 用户名</code> </li><li><code>admin</code>: [<code>Github 用户名</code>]  【这个仓库的管理员，可以有多个，用数组表示，一般写自己】</li><li><code>id</code>: <code>location.pathname</code>  【页面的唯一标识，gitalk会根据这个标识制动创建issue的标签，我们使用页面的相对路径作为标识即可】</li></ul></li><li><p>上面提到必须有一个<code>Github Application</code></p><p><strong><code>Github Application</code></strong>,  <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请地址</a></p><p>填写好参数：</p><ul><li><p><code>Application name</code>:  就是App的名字，任意起</p><p>我这里写<code>BY Blog</code></p></li><li><p><code>Homepage URL</code>: App的地址，写<strong>自己博客仓库地址</strong>就好。</p><p>我这里写<code>https://github.com/lmwings/lmwings.github.io.git</code></p></li><li><p><code>Application description</code>: 简单写下描述</p><p>我这里写<code>BY Blog</code></p></li><li><p><code>Authorization callback URL</code>:  回调地址，也写<strong>自己博客地址</strong>就好</p><p>我这里写<code>https://www.lmwings.top</code></p></li></ul><p>点击<code>Register application</code>创建应用。</p></li><li><p>生成的页面会有</p><p>(数字做了伪造处理)</p><pre class=" language-shell"><code class="language-shell">Client ID0123esadf950656f3339b6Client Secret7ed5373372d9gecf3be09c4sde6724015bwweb1</code></pre><p>设置好参数提交，应该就可以出现评论框了。</p></li></ol><h2 id="我的使用"><a href="#我的使用" class="headerlink" title="我的使用"></a>我的使用</h2><p>因为我用的是<code>hexo</code>，使用的主题是<code>matery</code>, 本身主题支持了这个插件，所以我不需要去关注代码层面的东西，只要把生成的<code>Client ID</code> 和<code>Client Secret</code>等配置好就好。</p><p>在主题的<code>_config.yml</code>下，<strong>修改<code># Gitalk 评论模块的配置，默认为不激活</code></strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># the Gitalk config，default disabled</span><span class="token comment" spellcheck="true"># Gitalk 评论模块的配置，默认为不激活</span><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> lmwings  <span class="token key atrule">repo</span><span class="token punctuation">:</span> lmwings.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span> 0123e932340656f3c89b6    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> 7ed52348272d23412cf3be09c3342401532b200b1  <span class="token key atrule">admin</span><span class="token punctuation">:</span> lmwings</code></pre><p>把代码上传到参考，会自动触发<code>travis ci</code>, 然后部署</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>启用以后，需要给每一篇都建一个<code>issus</code>，否则没地方评论。手动建立也是很麻烦的，有没有更加方便的方法呢？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitalk </tag>
            
            <tag> 评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一套鼠标键盘控制局域网多台电脑</title>
      <link href="/yi-tao-shu-biao-jian-pan-kong-zhi-ju-yu-wang-duo-tai-dian-nao.html"/>
      <url>/yi-tao-shu-biao-jian-pan-kong-zhi-ju-yu-wang-duo-tai-dian-nao.html</url>
      
        <content type="html"><![CDATA[<h1 id="一套鼠标键盘控制局域网多台电脑"><a href="#一套鼠标键盘控制局域网多台电脑" class="headerlink" title="一套鼠标键盘控制局域网多台电脑"></a>一套鼠标键盘控制局域网多台电脑</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在家里，有好几天电脑，大部分至少一台台式机，一台笔记本。有时候需要一起使用，但是又不想来回切换鼠标和键盘。有没有版本在同一台电脑上一起操作呢？</p><blockquote><p>方法一：设置电脑允许远程，在主电脑上进行连接访问</p><p>方法二：使用微软官方推出的工具<code>Mouse without Borders</code>(<strong>无界鼠标</strong>)</p><p>方法三：使用<code>synergy</code></p></blockquote><h2 id="使用无界鼠标"><a href="#使用无界鼠标" class="headerlink" title="使用无界鼠标"></a>使用无界鼠标</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote><p> <a href="https://www.microsoft.com/en-us/download/details.aspx?id=35460" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=35460</a> </p></blockquote><p>两台电脑都需要安装。</p><p>安装完以后，其中一台点<code>yes</code>，另一台点<code>no</code>, 然后在<code>yes</code>的电脑上输入另一台电脑的连接密钥即可。</p><p>这样就可以用主电脑来一起操作了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MouseWithoutBordersSetup </tag>
            
            <tag> 无界鼠标 </tag>
            
            <tag> 局域网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码覆盖率测试工具codecov使用</title>
      <link href="/ji-cheng-ce-shi-gong-ju-codecov-shi-yong.html"/>
      <url>/ji-cheng-ce-shi-gong-ju-codecov-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h1 id="代码覆盖率测试工具codecov"><a href="#代码覆盖率测试工具codecov" class="headerlink" title="代码覆盖率测试工具codecov"></a>代码覆盖率测试工具<code>codecov</code></h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>codecov</code>可以用来进行代码覆盖率测试，</p><p>网址：</p><blockquote><p> <a href="https://codecov.io/" target="_blank" rel="noopener">https://codecov.io</a> </p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>首先登录这个网站，然后使用<code>github</code>账号登录</p></li><li><p>选择需要进行代码覆盖率测试的仓库，我这里选择了私有仓库<code>hexo-source</code></p><p>下周贴一下网站上的使用说明，主要就是两步。</p><p><strong>STEP 1 - COPY TOKEN</strong><br>Use this token when uploading reports to this repository.<br>You can set it in your CI environment variables. <code>CODECOV_TOKEN="bb6f3f81#7d58#4df4#9e64#d445c56b0914"</code><br><strong>STEP 2 - UPLOAD REPORTS</strong><br>Upload your reports using the bash uploader in your preferred CI/CD environment</p><pre class=" language-shell"><code class="language-shell">bash <(curl -s https://codecov.io/bash)</code></pre><p>其实原理很简单，就是主动把测试覆盖率的报告通过<code>Codecov</code>提供的脚本(<code>bash uploader</code>)上传就行了，</p><p>由于我选的是私有仓库，所以要先上传一下<code>Token</code>到<code>Travis CI</code>的环境变量中，这个具体方法在<code>使用Travis CI持续集成</code>中有说明。</p></li><li><p>这个测试要看是对什么语言进行测试</p><p>我这里本来打算对<code>hexo源码</code>进行测试，也就是使用的语言是<code>node_js</code></p><p>需要依赖测试框架，来生成<code>codecov</code>包，</p><p>比如<code>Mocha + lstanbul</code>来测试覆盖率，<code>Mocha</code>是<code>javaScript</code>项目的测试工具， <code>lstanbul</code>是<code>JS</code>测试覆盖率报告生存工具。</p><p>这些需要配置一下。</p></li><li><p>在<code>.travis.yml</code>中同步修改</p></li><li><p><strong>(由于对node不太熟悉，并为尝试，后面有时间好好研究下)</strong></p><p>可以参考下</p><blockquote><p>  <a href="https://www.cnblogs.com/DM428/p/10392541.html" target="_blank" rel="noopener">https://www.cnblogs.com/DM428/p/10392541.html</a> </p><p> <a href="https://github.com/codecov/example-node" target="_blank" rel="noopener">https://github.com/codecov/example-node</a> </p></blockquote></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码托管 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codecov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写开源项目README文件</title>
      <link href="/bian-xie-kai-yuan-xiang-mu-readme-wen-jian.html"/>
      <url>/bian-xie-kai-yuan-xiang-mu-readme-wen-jian.html</url>
      
        <content type="html"><![CDATA[<h1 id="编写开源项目的README文件"><a href="#编写开源项目的README文件" class="headerlink" title="编写开源项目的README文件"></a>编写开源项目的<code>README</code>文件</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>每一个代码托管平台，当创建好仓库，如果上传代码，目录下有<code>README</code>文件，里面的内容就会显示在项目下面，主要是写一些项目的说明，安装，使用等等。但是具体有哪些内容呢？著名的开源项目，还都很大好看的图标，比如<code>build pass</code>等等，这些都是怎么弄的？带的这些疑问，利用这次<code>hexo</code>静态网站的部署，学习一下，也好让自己的项目看起来更像专业的开源项目。</p><p>主要的代码托管平台</p><blockquote><p> <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> </p><p> <a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a> </p><p> <a href="https://coding.net/" target="_blank" rel="noopener">CODING</a> </p><p> <a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a> </p><p> <a href="https://code.aliyun.com/dashboard/projects" target="_blank" rel="noopener"> CODE-aliyun</a> </p></blockquote><p>那些图标，可以通过这个网站生成</p><blockquote><p> <a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a> </p></blockquote><h2 id="2-开始编写"><a href="#2-开始编写" class="headerlink" title="2. 开始编写"></a>2. 开始编写</h2><p><strong>主要目录结构</strong></p><pre class=" language-shell"><code class="language-shell">## 国际化  - 【一般最外层写英文的，然后可以链接到中文日文等等不同语言版本的README】## 项目背景  - 【主要是描述一下项目】 - 用什么语言？ - 什么用途？ - 最新版本是什么？ - 构建/测试结果等信息，主要是travis，coverage，npm等等Badge，就是那些图标 shield.io - DEMO演示地址或者官网是什么？ - 【还可以放特性的列表】## 安装及快速开始 - 【告诉用户怎么用，很重要，要清晰干净，按步骤要完全可复现，降低用户使用难度】 - 可以放一些动图## 项目具体介绍及相关项目 - 【可以放项目的整体框架图】 - 如果有相关的类似或者参考项目，也可以在这里提一下## 主要项目负责人 - 【介绍负责人，可以直接艾特标注】## 参与贡献方式 - 【填写怎么样参与到项目，比如提issue，提pr等】## 版本更新日志 - 【安版本更新日志填写】## 待办事宜 - 【如果有后续计划开发项，可以在这里列出来，也好让大家有个期待】## 鸣谢和协议 - 【主要可以放比如打赏二维码等，鸣谢主要贡献】 - 【开源协议许可】</code></pre><p><strong>Badge图标怎么加</strong></p><p>其他都是项目具体相关的，只要按照正常逻辑写即可，主要看看<code>travis/coverage/npm</code>等图标，这样看起来更加有安全感。</p><p><code>Github徽标官方网站</code>：</p><blockquote><p> <a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a> </p></blockquote><h3 id="添加动态徽标"><a href="#添加动态徽标" class="headerlink" title="添加动态徽标"></a>添加动态徽标</h3><p>动态徽标是如果项目状态发生变化，会自动更新状态的徽标，它就是当前项目的真是状态。</p><p>常用的有：</p><ul><li>持续集成状态</li><li>项目版本信息</li><li>代码测试覆盖率</li><li>项目下载量</li><li>贡献者统计等</li></ul><p>我们以<code>Travis CI</code>持续集成状态为例。具体涉及的搭建方法<a href="https://www.lmwings.top/2020/02/06/shi-yong-travisci-chi-xu-ji-cheng/">使用TravisCI持续集成</a></p><ol><li><p>进入<code>Travis CI</code>, 到构建过的项目中，可以看到最上面有<code>build passing</code>或者<code>build failing</code>徽标</p></li><li><p>点击它，在弹出来的对话框中，有各种语言的徽章地址。</p></li><li><p>根据自己需要进行选择， 我这里选择了<code>Makdown</code>格式</p><pre class=" language-shell"><code class="language-shell">[![Build Status](https://travis-ci.com/lmwings/hexo-source.svg?token=yoTY1CXWQpQKsuGEijQk&branch=master)](https://travis-ci.com/lmwings/hexo-source)</code></pre></li><li><p>复制到<code>README</code>中，然后<code>git push</code>到仓库，过一会可以看到这个徽标。</p></li><li><p>这个是动态加载的，所以需要过一会才能刷新。</p></li></ol><h3 id="自定义徽标"><a href="#自定义徽标" class="headerlink" title="自定义徽标"></a>自定义徽标</h3><p>通过<code>shields.io</code>网站，可以自定义徽标</p><p><strong>徽标图标格式</strong></p><pre class=" language-shell"><code class="language-shell">https://img.shields.io/badge/{徽标标题}-{徽标内容}-{徽标颜色}.svg</code></pre><p><strong>带链接的微标</strong></p><pre class=" language-shell"><code class="language-shell">[![](https://img.shields.io/badge/{徽标标题}-{徽标内容}-{徽标颜色}.svg)]({linkUrl})</code></pre><p><strong>变量说明</strong></p><ul><li><p>徽标标题：徽标左边的文字</p></li><li><p>徽标内容： 徽标右边的文字</p></li><li><p>徽标颜色： 徽标右边的背景颜色， 可以是颜色的16进制值，也可以是颜色英文。</p><p>（<code>brightgreen/green/yellowgreen/yellow/orange/red/blue/lightgrey/success/important/critical/informational/inactive/blueviolet/ff69b4/9cf</code>）</p></li></ul><p>变量之间用<code>-</code>连接。按上面规则体会为需要的内容即可自定义一个徽标</p><h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><p>除了上面的用法，网站还提供了<code>query string</code>来控制徽标样式。使用方法和浏览器<code>URL</code>的<code>query string</code>一致</p><blockquote><p>徽标图标地址？{参数名}={参数值}， 多个参数用<code>&amp;</code>连接</p></blockquote><pre class=" language-shell"><code class="language-shell">https://img.shields.io/badge/{徽标标题}-{徽标内容}-{徽标颜色}.svg?{参数名1}={参数值1}&{参数名2}={参数值2}</code></pre><p>常用的<code>query string</code>参数有： </p><ul><li><code>style</code>: 控制徽标主题样式， 可以为<code>plastic|flat|flat-square|social</code></li><li><code>label</code>: 用来强行覆盖原有徽标的标题文字</li><li><code>colorA</code>: 控制左半部分背景颜色，<strong>只能用16进制颜色值作为参数，不能用颜色英文</strong></li><li><code>colorB</code>:  控制右半边部分背景颜色。</li></ul><p><strong>举例</strong></p><p><code>flat扁平化效果</code></p><pre class=" language-shell"><code class="language-shell">![](https://img.shields.io/badge/blog-@champyin-yellow.svg?style=flat)</code></pre><p><img src="https://img.shields.io/badge/blog-@champyin-yellow.svg?style=flat" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码托管 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/hexo-chang-yong-ming-ling.html"/>
      <url>/hexo-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a><code>hexo</code>常用命令</h1><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h2><pre class=" language-shell"><code class="language-shell">   hexo init <folder> 【新建一个网站，如果没有设置文件夹，会在当前目录下创建】</code></pre><h2 id="2-新建文章"><a href="#2-新建文章" class="headerlink" title="2. 新建文章"></a>2. 新建文章</h2><pre class=" language-shell"><code class="language-shell">   hexo new post 文章名</code></pre><p>   <strong>注意：</strong>1.如果标题有空格，注意添加引号<code>"文章名"</code>. 2. 会在source下的_post文件夹内创建文件</p><h2 id="3-新建页面"><a href="#3-新建页面" class="headerlink" title="3. 新建页面"></a>3. 新建页面</h2><pre class=" language-shell"><code class="language-shell">   hexo new page categories 【新建类别页面，会自动创建一个页面】</code></pre><h2 id="4-编译生成"><a href="#4-编译生成" class="headerlink" title="4. 编译生成"></a>4. 编译生成</h2><pre class=" language-shell"><code class="language-shell">   hexo clean  【清理缓存】   hexo g      【编译】   hexo s      【本地预览】   hexo d      【部署发布】</code></pre><h2 id="5-发表草稿"><a href="#5-发表草稿" class="headerlink" title="5. 发表草稿"></a>5. 发表草稿</h2><pre class=" language-shell"><code class="language-shell">   hexo publish <filename></code></pre><h2 id="6-渲染文件"><a href="#6-渲染文件" class="headerlink" title="6. 渲染文件"></a>6. 渲染文件</h2><pre class=" language-shell"><code class="language-shell">   hexo render <file1> [file2] ...   【暂时没有使用过】</code></pre><h2 id="7-从其他博客迁移"><a href="#7-从其他博客迁移" class="headerlink" title="7. 从其他博客迁移"></a>7. 从其他博客迁移</h2><pre class=" language-shell"><code class="language-shell">   hexo migrate <type></code></pre><h2 id="8-显示草稿"><a href="#8-显示草稿" class="headerlink" title="8. 显示草稿"></a>8. 显示草稿</h2><pre class=" language-shell"><code class="language-shell">   hexo --draft</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TravisCI持续集成</title>
      <link href="/shi-yong-travisci-chi-xu-ji-cheng.html"/>
      <url>/shi-yong-travisci-chi-xu-ji-cheng.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用Travis-CI持续集成"><a href="#使用Travis-CI持续集成" class="headerlink" title="使用Travis CI持续集成"></a>使用<code>Travis CI</code>持续集成</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p><code>github</code>可以和<code>Travis CI</code>一起使用，这样可以达到持续集成的目的，可以理解为当有内容提交到仓库，就可以按规则触发持续集成命令，这个命令包含环境配置，编译，允许测试，结果生成等等。现在有一个契机学习它，就是我已经在<code>github</code>上部署了是<code>hexo</code>静态网站，有一个缺点就是，每次都需要在本地电脑的源码目录下，执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>, 这样才能发布到<code>pages</code>页面上，能不能把源码也上传到仓库？最好是私有仓库，然后我只要先这个仓库递交内容，后台通过<code>Travis CI</code>自动编译发布<code>hexo网站</code>， 这样可以不受电脑约束，只要能提交到这个源码参考，都可以自动部署。这里做一下笔记记录，也当是对<code>Travis CI</code>的学习。</p><p>还有其他的一些持续集成平台<code>https://hexo.io/zh-cn/docs/one-command-deployment</code></p><p><code>2023.3.12</code>切换到[[2023-03-11-迁移到Github-Action]]</p><p><strong>明确需求</strong></p><p>通过<code>Travis CI</code>，当源码目录有文件提交时候，可以自动部署完整到<code>github</code>/<code>coding</code>上。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p><strong><code>github</code>上使用</strong></p><p>关于<code>travis-ci</code>的使用，官方文档是<code>https://docs.travis-ci.com/user/tutorial/</code>，使用之前可以大概看下，这个是最标准的使用教程。</p><ol><li><p>在<code>github</code>上新建一个仓库，我这里先创建私有仓库，也可以直接在博客发布的参考新建一个分支，效果是一样的。</p><p>我命名为<code>hexo-source</code>, 私有地址为<code>https://github.com/lmwings/hexo-source</code></p></li><li><p>把本地的<code>hexo代码</code>上传到仓库</p><pre class=" language-shell"><code class="language-shell"># 先拉一份仓库内容git clone https://github.com/lmwings/hexo-source.git# 把hexo源码都拷贝到 hexo-source这个目录下hexo-source, 然后提交cd hexo-sourcegit add . # '.'号表示添加该目录下所有待提交文件到追踪区git commit -m "add hexo source code"git push </code></pre><p>这个遇到一个问题，就是主题文件夹<code>matery</code>, 上传以后是灰色的，然后<code>git clone</code>下来也是为空，原因是这个主题是来着其他<code>git 仓库</code>，只要删除掉里面的<code>.git/.gitignore</code>, 再重新<code>add/commit/push</code>即可</p></li><li><p>到<code>travis-ci</code>登录</p><p>网址<code>https://travis-ci.com/</code>, 只允许使用<code>github账号登录</code></p><p>这里先登录。</p></li><li><p>到<code>github</code>中产生<code>personal access token</code></p><p>由于<code>travis-ci</code>需要操作<code>github仓库</code>, 无论使用<code>ssh</code>还是<code>https</code> 都需要告诉密码，这个不太合理，所以通过<code>personal access token</code>方式来进行授权。</p><p>（1）选择<code>setting—&gt;Developer setting-&gt;Personal access token-&gt;Generate new token</code>,</p><p>然后打开需要授权的功能即可，把握原则，授权应该满足最小原则，能少就少，使用我这里只有把仓库相关权限授权，即只勾选<code>repo</code></p><p>（2）点击<code>Generato token</code>后会生成<code>Access Token</code>，<strong>注意， 这个需要马上复制拷贝出来，刷新了就没了，需要重新生成了</strong>。</p><p>（3）生成了这个<code>Access Token</code>后，其实就是可以通过这个码来访问了。</p><p>访问规则是<code>https://{Access_Token}@github.com/owner/repo.git</code></p><pre class=" language-shell"><code class="language-shell"># 没设置之前可以通过这个clone，如果需要提交代码需要输入账号和密码。git和ssh都是，ssh可以使用公钥免密git clone https://github.com/lmwings/hexo-source.git# 设置以后（其中数字就是我的access 伪造的，哈哈）git clone https://22269a5ff52a48193045f9c883c00d7a9fdd325@github.com/lmwings/lmwings.github.io.git</code></pre><p>^b293ba</p></li><li><p>添加<code>Token</code></p><p>回到<code>travis-ci</code>，选择<code>hexo-source</code>这个源代码仓库, 添加环境变量<code>GIT_REPO_TOKEN</code>， 值就是刚才复制出来的<code>Access Token</code>, 并记得设置<code>DISplay Value in build log</code>不要勾选，勾选了就等于公开了<code>token</code>, 最后点击<code>ADD</code>就完成了设置。</p><p>我们执行脚本时候，就可以使用<code>$GIT_REPO_TOKEN</code>来访问<code>token</code>,</p><p>设置<code>Cron Jobs</code>的分支为<code>master</code>，因为我就单独放在主线上面。</p></li><li><p>需要在代码中添加<code>.travis.yml</code>文件，具体内如如下，然后推送到参考</p><p><strong><code>.travis.yml</code></strong></p><p>里面的字段以及简单教程可以参考<code>https://michael728.github.io/2019/06/16/cicd-hexo-blog-travis/</code></p><p>这个要注意格式是否正确，需要使用<code>yaml语法</code>, 可以通过在线检测工具看看是否格式有问题</p><p><code>http://nodeca.github.io/js-yaml/</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">sudo</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js<span class="token comment" spellcheck="true"># 指定NodeJS的版本</span><span class="token key atrule">node_js</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token number">12 </span><span class="token comment" spellcheck="true"># use nodejs v12 LTS</span><span class="token key atrule">cache</span><span class="token punctuation">:</span> npm<span class="token comment" spellcheck="true"># 指定要构建的分支</span><span class="token key atrule">branches</span><span class="token punctuation">:</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> master <span class="token comment" spellcheck="true"># build master branch only</span><span class="token comment" spellcheck="true"># 在安装项目环境阶段需要运行的命令，其中travis_env_init.sh是自己编写的</span><span class="token key atrule">install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> source travis_env_init.sh<span class="token comment" spellcheck="true"># 在构建阶级需要允许的命令  </span><span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo clean  <span class="token punctuation">-</span> hexo generate <span class="token comment" spellcheck="true"># generate static files</span><span class="token comment" spellcheck="true"># 在构建成功后要允许的命令，构建事吧不会执行 </span><span class="token key atrule">after_success</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo deploy <span class="token punctuation">></span> /dev/null <span class="token comment" spellcheck="true"># 通过 hexo的 deploy 命令部署博客</span><span class="token comment" spellcheck="true"># 设置通知项</span><span class="token key atrule">notifications</span><span class="token punctuation">:</span>  email<span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token comment" spellcheck="true">#deploy:</span><span class="token comment" spellcheck="true">#  provider: pages</span><span class="token comment" spellcheck="true">#  skip-cleanup: true</span><span class="token comment" spellcheck="true">#  github-token: $GIT_REPO_TOKEN</span><span class="token comment" spellcheck="true">#  keep-history: true</span><span class="token comment" spellcheck="true">#  on:</span><span class="token comment" spellcheck="true">#    branch: master</span><span class="token comment" spellcheck="true">#  local-dir: public</span></code></pre><p>这里有一个<code>travis_env_init.sh</code>主要是为了把复杂的命令都统一在一起。</p><p><strong><code>travis_env_init.sh</code></strong></p><pre class=" language-shell"><code class="language-shell"># travis_env_inti.sh# 全局安装 HEXOnpm install -g hexo# 全局安装 HEXO 命令行工具npm install -g hexo-cli# 安装 package.json中的依赖npm install# 使用hexo d 需要用到npm install hexo-deployer-git --save# 安装一些使用到的插件npm i -S hexo-prism-pluginnpm install hexo-generator-search --savenpm i hexo-permalink-pyinyin --savenpm i --save hexo-wordcountnpm install hexo-filter-github-emojis --savenpm install hexo-generator-feed --save# 为了不需要输入和公开密码，我们使用了token的方式，本身需要把_config.yml中修改为带token的地址# 这里为了方便，使用了脚本来替换。#sed -i "s~git@github.com:~https://s~git@github.com:~https://${GIT_REPO_TOKEN}@github.com/~" _config.ymlsed -i "s/    github: https:\/\/github.com/    github: https:\/\/${GIT_REPO_TOKEN}@github.com/g" _config.yml</code></pre></li><li><p>提交代码到仓库，理论上应该就会自动<code>ci</code></p><pre class=" language-shell"><code class="language-shell">git add .travis.yml travis_env_init.shgit commit -m "add travis.yml"git push</code></pre></li><li><p>可以到<code>travis-ci</code>查看具体的<code>Job log</code></p><p>我这里是<code>https://travis-ci.com/lmwings/hexo-source</code></p><p>选择 <code>Current</code>查看</p></li></ol><p><strong><code>coding</code>上使用</strong></p><p><code>travis ci</code>是不能用<code>coding</code>关联使用的，但是如果我们<code>hexo</code>配置文件中<code>deploy</code>中配置了<code>coding</code>，也可以在上面那个基础上，顺便让<code>travis ci</code>把编译好的代码上传到我们部署好的<code>coding仓库中</code>。为了不输入和暴露密码，使用方式也采用 <strong>访问令牌</strong> 的方式。</p><ol><li><p>到<code>coding</code>上生成访问令牌</p><p><code>https://lmwings.coding.net/user/account/setting/tokens/new</code>, 选择 <code>project:depot</code>，然后点击c创建令牌即可。</p></li><li><p>先本地验证下能不能使用访问令牌访问</p><p>按照官方教程<code>[https://open.coding.net/personal-access-token/#%E4%BD%BF%E7%94%A8%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C](https://open.coding.net/personal-access-token/#使用访问令牌)</code>, 访问规则是</p><pre class=" language-shell"><code class="language-shell">git clone https://testuser:90ed7a169febb12d17e14aa5531827476f6b3a4e@test.coding.net/test/testRepo.git</code></pre><p>这里有一个很坑的地方，就是用户名，我的一直是<code>lmwings</code>，但是不成功。</p><p>后来仔细查看了下，发现是系统升级了，<code>coding</code>和<code>腾讯开发者平台</code>合并了，所以登录用户名只允许使用邮箱或者手机号! 就是<strong><code>testuser</code>要写<code>手机号</code></strong></p><pre class=" language-shell"><code class="language-shell"># 为了保密，下面手机号和密钥是伪造的，要替换成自己的！！！git clone https://13500000000:4400de0972000013fc6c000a5309a6@e.coding.net/lmwings/lmwings.git</code></pre></li><li><p>把上面的<code>token</code>添加到<code>travis ci</code>中</p><p>和之前<code>github</code>的步骤一样，这里主要是添加一个环境变量，<code>CODING_REPO_TOKEN</code>，值填写为刚才申请到的<code>token</code>. 为了不把手机号也暴露出去，我这里把手机号也设置成环境变量.<code>CODING_USER_NAME</code>，值填写自己的<code>coding</code>账号的手机号</p></li><li><p>修改<code>travis_env_init.sh</code></p><p>主要是添加替换<code>token</code>访问的脚本，这样<code>travis ci</code>拉下来以后就可以不需要密码，进行<code>hexo d</code>上传部署到<code>coding</code> 上了</p><pre class=" language-shell"><code class="language-shell"># 增加下面这句sed -i "s/    coding: https:\/\/e.coding.net/    coding: https:\/\/${CODING_USER_NAME}:${CODING_REPO_TOKEN}@e.coding.net/g" _config.yml</code></pre></li><li><p>提交到代码到仓库</p><pre class=" language-shell"><code class="language-shell">git add travis_env_init.shgit statusgit commit -m "add travisci hexo deploy to coding"git push</code></pre></li><li><p>到<code>travis ci</code>中查看日志</p><p><code>https://travis-ci.com/lmwings/hexo-source</code></p><p>另外，如果<code>coding pages</code>设置了检测到更新就自动部署的话，也可以在<code>静态网站</code>上看到自动部署了。</p></li></ol><p><strong><code>gitee</code>上使用</strong></p><p>这个和<code>coding</code>上一样，主要是为了推送而已，</p><p>但是缺点是，免费的<code>gitee pages</code>服务，不支持自动检测更新，需要手动更新，所以这个只是提交一下代码而已。</p><ol><li><p>到<code>gitee</code>私人令牌申请界面，申请令牌</p><p><code>https://gitee.com/personal_access_tokens</code></p></li><li><p>本地验证下通过令牌是否能进行访问</p><p>访问规则和<code>github</code>是一样的</p><pre class=" language-shell"><code class="language-shell"> git clone https://ae1cs94d1s6bf3ddds5f8f37328@gitee.com/lmwings/lmwings.git</code></pre></li><li><p>把上面的<code>token</code>添加到<code>travis ci</code>中</p><p>设置环境变量<code>GITEE_REPO_TOKEN</code></p></li><li><p>修改<code>travis_env_init.sh</code></p><pre class=" language-shell"><code class="language-shell"># 增加下面这句sed -i "s/    gitee: https:\/\/gitee.com/    gitee: https:\/\/${GITEE_REPO_TOKEN}@gitee.com/g" _config.yml</code></pre></li><li><p>提交到代码到仓库</p></li><li><p>测试验证，然后手动更新下<code>pages</code></p><p>（<strong>发现实际使用中，失败了。但是使用token方式是可以clone的，在travisci里面就不行。不继续研究了，反正这个还需要手动更新博客，太麻烦了</strong>）</p></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
            <tag> TravisCI </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加自己的域名解析</title>
      <link href="/tian-jia-zi-ji-de-yu-ming-jie-xi.html"/>
      <url>/tian-jia-zi-ji-de-yu-ming-jie-xi.html</url>
      
        <content type="html"><![CDATA[<h1 id="添加解析自己的域名"><a href="#添加解析自己的域名" class="headerlink" title="添加解析自己的域名"></a>添加解析自己的域名</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><p>先申请一个域名，我选择在阿里云平台上注册，这里为了使用，就选了最便宜的<code>top</code>域名。</p><p>这些教程都很清晰，按部就班做就好，我申请到的域名为<code>lmwings.top</code>。</p><p>但是现在还不能直接访问，怎么样才能把域名和我们的网站连接在一起，</p><p>这个就需要添加解析，让解析服务器知道，访问这个域名，最后能找到我们网站的地址。我们这里个人静态博客，主要是搭建在<code>github</code>/<code>coding</code>/<code>gitee</code>，这里做域名分流解析，这样无论国内还是国外访问速度都可以比较快。</p><h2 id="2-添加解析"><a href="#2-添加解析" class="headerlink" title="2. 添加解析"></a>2. 添加解析</h2><p><strong><code>github</code>添加解析</strong></p><ol><li><p>需要在本地<code>hexo</code>代码目录下添加<code>CNAME</code>文件夹</p><p>目录<code>/source</code>下即可，这样<code>hexo d</code>时候<code>CNAME</code>才会被推送到仓库中，</p><p>文件内容就填写自己的域名地址即可<code>www.lmwings.top</code></p></li><li><p>在<code>github pages</code>上进行设置</p><p>我这里地址是<code>https://github.com/lmwings/lmwings.github.io/settings</code>, 其实就是网站仓库的项目<code>settings</code>中，在<code>GitHub Pages</code>的<code>Custom domain</code>里面填写自己的网站, 我这里填写<code>www.lmwings.top</code></p><p><strong>(发现这一步如果设置了，第一步可以不需要，但是为了保险，我还是都设置了)</strong></p><p>（设置A解析就可以不需要推送CNAME，但是github会建议设置为<code>CNAME</code>代理，可能是ip会变化吧）</p></li><li><p>先<code>ping</code>一下地址，并记录下</p><p>没有添加自己的域名之前，访问网址访问的是<code>github.io</code>域名的，我们现在<code>ping</code>一下这个地址，并记录一下它的<code>ip</code>， 后续需要使用到。</p><pre class=" language-shell"><code class="language-shell">ping lmwings.github.io正在 Ping lmwings.github.io [185.199.108.153] 具有 32 字节的数据:来自 185.199.108.153 的回复: 字节=32 时间=107ms TTL=53</code></pre></li><li><p>在阿里云上设置域名解析</p><p>我这里地址是<code>https://dns.console.aliyun.com/#/dns/setting/lmwings.top</code></p><p>主机记录：一个填写<code>@</code>, 一个填写<code>www</code>  (如果我们希望添加<code>blog.lmwings.top</code>的域名，则还要加一个<code>blog</code>)</p><p>记录值：就是上一步得到的<code>ip</code>地址</p></li><li><p>等待解析生效，一般<code>10分钟</code>左右即可</p></li><li><p>访问验证</p><pre class=" language-html"><code class="language-html">http://www.lmwings.top</code></pre></li></ol><p><strong><code>coding</code>添加解析</strong></p><ol><li><p>在阿里云上设置域名解析</p><p>直接设置一个<code>CNAME</code>记录类型即可，然后记录值为<code>coding 个人pages访问地址即可</code></p></li><li><p>到<code>coding</code>添加自定义域名</p></li><li><p>访问验证</p></li></ol><h2 id="3-域名分流解析配置"><a href="#3-域名分流解析配置" class="headerlink" title="3. 域名分流解析配置"></a>3. 域名分流解析配置</h2><p>由于国内和国外网络不通，我们即希望国内访问可以很快，也希望国外访问也可以很快。</p><p>那我们就可以对域名进行分流解析。</p><p>上面的解析中，我们可以解析到<code>github</code>和<code>coding</code>中，我们可以把对<code>github</code>的解析，记录类型设置为<code>A</code>, 解析线路为<code>境外</code>，分别设置主机记录<code>@</code>和<code>www</code>，然后设置记录类型为<code>CNAME</code> ,解析线路为<code>默认</code>，这样就大道分流解析配置的目的了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 解析 </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/git-chang-yong-ming-ling.html"/>
      <url>/git-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a><code>git</code>常用命令</h1><ol><li><p>设置全局账号密码</p><pre class=" language-shell"><code class="language-shell">git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"</code></pre></li><li><p>取消全局账号密码</p><pre class=" language-shell"><code class="language-shell">git config --global --unset user.namegit config --global --unset user.email</code></pre></li><li><p>查看全局配置</p><pre class=" language-shell"><code class="language-shell">git config --global --list</code></pre></li><li><p>初始化仓库</p><pre class=" language-shell"><code class="language-shell">git init</code></pre></li><li><p>提交到暂存库、版本库</p><pre class=" language-shell"><code class="language-shell">git add filegit commit -m "add messages!"</code></pre></li><li><p>查看版本记录</p><pre class=" language-shell"><code class="language-shell">git log</code></pre></li><li><p>回退版本</p><pre class=" language-shell"><code class="language-shell">git reset --hard HEAD~2</code></pre></li><li><p>查看<code>git</code>操作历史命令</p><pre class=" language-shell"><code class="language-shell">git reflog</code></pre></li><li><p>查看版本维护状态</p><pre class=" language-shell"><code class="language-shell">git status</code></pre></li><li><p>查看当前工作区和版本库最新区别</p><pre class=" language-shell"><code class="language-shell">git diff HEAD -- readme.txt</code></pre></li><li><p>撤销操作</p><pre class=" language-shell"><code class="language-shell">git checkout -- readme.txt 【未提交到暂存库，撤销本地修改】git rest HEAD readme.txt 【清空暂存库】</code></pre></li><li><p>删除操作</p><pre class=" language-shell"><code class="language-shell">git rm readme.txtgit commit -m "delete readme.txt"</code></pre></li><li><p>添加远程库</p><pre class=" language-shell"><code class="language-shell">git remote add origin http://xxx.xxx.xxx.xxx:xx/git/root/aa.gitgit remote origin git@github.com:MyGithubId/aa.git</code></pre></li><li><p>推送本地库内容到远程库</p><pre class=" language-shell"><code class="language-shell">git push -u origin mastergit push origin master</code></pre></li><li><p>重命名文件夹</p><pre class=" language-shell"><code class="language-shell">git mv -f oldfolder newfoldergit add -u newfoldergit commit -m "changed the foldername"</code></pre></li><li><p>从远程仓库获取最新的到本地</p><pre class=" language-shell"><code class="language-shell">git pull</code></pre><p>这样做比较危险，可能有很多冲突或者出错的地方，所以一般是这样操作</p><pre class=" language-shell"><code class="language-shell">git fetch origin master:temp  【把远程orgin仓库的master分支下载到本地temp分支】git diff temp 【比较本地代码和远程下来代码的差异】git merge temp 【合并temp分支到本地的master分支】git branch -d temp 【删除temp分支】</code></pre></li><li><p>查看远程仓库<code>url</code>地址</p><pre class=" language-shell"><code class="language-shell">git remote -v</code></pre></li><li><p>修改仓库<code>url</code>地址</p><pre class=" language-shell"><code class="language-shell"># 方法一：git remote set-url origin URL // URL为需要更换的新地址# 方法二：git remote rm origin // 删除现有远程仓库git remote add origin url // 添加新的远程仓库</code></pre></li><li></li><li><p>提交出现<code>errno 10053</code></p><pre class=" language-shell"><code class="language-shell">## 报下面错误：git push origin masterfatal: unable to access 'https://github.com/lmwings/hexo-source.git/': OpenSSL SSL_read: Connection was aborted, errno 10053# 解决方法：# 设置上次大小限制git config http.postBuffer 524288000git config --global http.sslVerify false# 查看配置是否生效git config -l</code></pre></li></ol><ol start="21"><li><p>提交报<code>TaskCanceledException encountered</code></p><pre class=" language-shell"><code class="language-shell">git config –global credential.helper manager# 再提交</code></pre></li></ol><ol start="22"><li><p>查看暂存区内容的命令</p><pre class=" language-shell"><code class="language-shell">git ls-files</code></pre></li><li><p>删除暂存区内存的命令</p><pre class=" language-shell"><code class="language-shell">git rm --cached 文件名</code></pre></li><li><p>冲突解决方法<br>很多时候，仓库中的修改和本地的修改有冲突的地方，一般会报下面的错误；</p><pre class=" language-shell$"><code class="language-shell$">git pullerror: Your local changes to the following files would be overwritten by merge:    .obsidian/workspacePlease commit your changes or stash them before you merge.Aborting</code></pre></li></ol><pre><code>怎么样解决这个冲突呢?方法一：合并修改先使用下面的命令做备份，```shell# 备份当前的工作区内容；从最近一次的提交中读取相应内容；即保证工作区和上一次提交的内容相同； 然后保存到Git栈中git stash# 提交到暂存区中git commit# 从Git栈中读取最近一次内容，并恢复到工作区git stash pop</code></pre><p>然最后使用<code>git diff</code>查看自动合并的情况，并做对应的修改。<br>方法二：放弃本地修改，直接覆盖</p><pre class=" language-shell"><code class="language-shell">git reset --hardgit pull</code></pre><ol start="28"><li><p>查看<code>Git</code>栈所有备份</p><pre class=" language-shell"><code class="language-shell">git stash list</code></pre></li><li><p>清空<code>Git</code>栈</p><pre class=" language-shell"><code class="language-shell">git stash clear</code></pre></li><li><p>解决文件冲突<br>提交到仓库中出现如下错误</p><pre class=" language-shell"><code class="language-shell">error: Pulling is not possible because you have unmerged files.hint: Fix them up in the work tree, and then use 'git add/rm <file>'hint: as appropriate to mark resolution and make a commit.fatal: Exiting because of an unresolved conflict.</code></pre><p>一般这种就是存在文件冲突，常常用如下方法解决</p><pre class=" language-shell"><code class="language-shell">git add -ugit commit -m ""git pull</code></pre></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同一电脑多个ssh-key管理</title>
      <link href="/tong-yi-dian-nao-duo-ge-ssh-key-guan-li.html"/>
      <url>/tong-yi-dian-nao-duo-ge-ssh-key-guan-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows上多git账号-多ssh-key管理"><a href="#Windows上多git账号-多ssh-key管理" class="headerlink" title="Windows上多git账号/多ssh-key管理"></a><code>Windows</code>上多<code>git</code>账号/多<code>ssh-key</code>管理</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>主要是用于多个代码托管平台，常见的有<code>github</code>、<code>coding</code>、<code>gitee</code>等</p><p>在设置<code>ssh</code>公钥时候，一般一个平台生成一封文件夹有平台标识的公钥文件, 一般默认路径为<code>.ssh/*.pub</code>中</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><ol><li><p>生成公钥</p><pre class=" language-shell"><code class="language-shell"># Windows默认生成的路径$ cd /c/Users/Administrator/.ssh# 生成coding公钥文件，后面邮箱是我注册的邮箱地址，输入文件名为 coding即会生成 coding.pud文件$ ssh-keygen -t rsa -b 4096 -C 1321559220@qq.comGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): rsa_coding# 生成github公钥文件，后面邮箱是我注册的邮箱地址，输入文件名为 coding即会生成 coding.pud文件$ ssh-keygen -t rsa -b 4096 -C 1321559220@qq.comGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): rsa_github</code></pre></li><li><p>在<code>.ssh</code>下新建<code>config</code>文件</p><p>新建<code>config</code>文件，文件内容为</p><pre class=" language-shell"><code class="language-shell"># 配置github.comHost github.com                 HostName github.comPreferredAuthentications publickeyIdentityFile C:\Users\Administrator\.ssh\id_rsa.pubUser lmwings# 配置e.coding.net Host e.coding.net HostName e.coding.netPreferredAuthentications publickeyIdentityFile C:\Users\Administrator\.ssh\coding.pubUser lmwings# 配置git.gitee.comHost git@gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile C:\Users\Administrator\.ssh\rsa_gitee.pubUser lmwings</code></pre></li><li><p>即可使用多<code>git</code>账号，多<code>ssh-key</code>管理了</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
            <tag> ssh-key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo到github</title>
      <link href="/bu-shu-hexo-dao-github.html"/>
      <url>/bu-shu-hexo-dao-github.html</url>
      
        <content type="html"><![CDATA[<h1 id="部署hexo到github上"><a href="#部署hexo到github上" class="headerlink" title="部署hexo到github上"></a>部署<code>hexo</code>到<code>github</code>上</h1><h2 id="1-申请github账号"><a href="#1-申请github账号" class="headerlink" title="1. 申请github账号"></a>1. 申请<code>github</code>账号</h2><ol><li>进入<code>https://github.com/</code>申请，我这里申请的用户名是<code>lmwings</code></li><li>建立个人仓库，仓库名为<code>lmwings.github.io</code>，这个是规则是固定的，一个账号只有一个<code>github page</code>页面. 即<code>&lt;用户名&gt;.github.io</code></li></ol><h2 id="2-上传"><a href="#2-上传" class="headerlink" title="2. 上传"></a>2. 上传</h2><p>把本地验证好的<code>hexo</code>个人网站，上传到<code>lmwings.github.io</code>仓库中</p><ol><li><p><code>windows</code>安装好<code>git</code></p></li><li><p>打开<code>Git Bash</code>，输入<code>github</code>相关账号</p><pre class=" language-shell"><code class="language-shell">git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"</code></pre></li><li><p>生成<code>ssh</code>密钥文件</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></pre><p>直接一直回车即可，然后找到生成的<code>.ssh</code>文件夹中的<code>id_rsa.pub</code>文件，把内容全部复制</p><p><code>https://github.com/settings/keys</code>页面中新建<code>new SSH Key</code>，标题随便起。</p></li><li><p>验证密钥是否成功</p><p>在<code>git bash</code>中输入<code>ssh git@github.com</code></p><pre class=" language-shell"><code class="language-shell">Administrator@JIKXYRXHZ8CSKUY MINGW64 /e/work/hexo_blog$ ssh git@github.comPTY allocation request failed on channel 0Hi lmwings! You've successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.Administrator@JIKXYRXHZ8CSKUY MINGW64 /e/work/hexo_blog</code></pre></li><li><p><code>hexo</code>一些命令</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新建文章</span>hexo n 新建文章<span class="token number">1</span><span class="token comment" spellcheck="true"># 新建页面</span>hexo page categorys<span class="token comment" spellcheck="true"># 生成</span>hexo g<span class="token comment" spellcheck="true"># 启动服务预览</span>hexo s<span class="token comment" spellcheck="true"># 部署</span>hexo d<span class="token comment" spellcheck="true"># 清除缓存</span>hexo clean</code></pre></li><li><p>修改本地<code>hexo</code>代码根目录下的<code>_config.ymal</code>配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lmwings/lmwings.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre></li><li><p>按照部署插件</p><pre class=" language-shell"><code class="language-shell">npm install hexo-deployer-git --save</code></pre></li><li><p>推送部署</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo ghexo d</code></pre></li><li><p>访问验证</p><p><code>lmwings.github.io</code></p></li></ol><h2 id="部署到其他平台"><a href="#部署到其他平台" class="headerlink" title="部署到其他平台"></a>部署到其他平台</h2><p><strong>部署到<code>coding</code></strong></p><p>由于<code>github</code>是国外的，在国内访问较慢，所以我同时部署到<code>gitee</code>和<code>coding</code>上面。</p><p>步骤大部分和<code>github</code>上面部署是一样的，下面做简单的记录</p><ol><li><p>部署到<code>coding</code></p><p><strong>首先</strong>， <code>https://coding.net/</code>申请账号</p><p>这里会要求先创建团体，再创建用户，可以按自己随便起，里面可以修改。</p><p><strong>然后</strong>，创建一个和自己的用户名一样的项目仓库， <strong>注意</strong>： 启用README.md文件初始化项目 ，最好打钩，否则可能找不到<code>master分支</code></p><p><strong>再</strong>，配置<code>ssh</code>公钥，这个步骤就是<code>github部署</code>时候的第3步，电脑中生成的<code>id_rsa.pub</code>文件即为公钥，为了能在多个代码托管平台工作，需要生成一个新的。这里输入的<code>coding</code>就是生成是公钥文件名</p><pre class=" language-shell"><code class="language-shell"># Windows默认生成的路径$ cd /c/Users/Administrator/.ssh# 生成公钥文件，后面邮箱是我注册的邮箱地址，输入文件名为 coding即会生成 coding.pud文件$ ssh-keygen -t rsa -b 4096 -C 1321559220@qq.comGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): coding</code></pre><p>然后把<code>coding.pub</code>的内容填写到<code>https://lmwings.coding.net/user/account/setting/keys</code></p><p>测试一下是否设置正常</p><pre class=" language-shell"><code class="language-shell">ssh -T git@e.coding.net</code></pre><p><strong>发现测试失败</strong>， 提示<code>git@git.coding.net: Permission denied (publickey).</code></p><p>这个要么就是<code>git</code>账号错误，要么就是<code>ssh -T</code>命令输入错误了.</p></li><li><p>配置<code>hexo</code>根目录下的<code>_config.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>     <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lmwings/lmwings.github.io.git<span class="token punctuation">,</span>master    <span class="token key atrule">coding</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//e.coding.net/lmwings/lmwings.git<span class="token punctuation">,</span>master</code></pre></li><li><p>推送部署</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo ghexo d</code></pre></li><li><p>需要在<code>condig.net</code>上</p><p>需要实名认证后才允许使用<code>pages</code>功能，触发机制可以选择手动部署和自动部署</p><p><code>构建与部署--静态网站--立即部署</code></p></li><li><p>访问上面的地址</p><pre class=" language-shell"><code class="language-shell">https://722tv0.coding-pages.com/</code></pre></li></ol><p><strong>部署到<code>gitee</code></strong></p><ol><li><p>申请<code>gitee</code>账号</p><p><code>https://gitee.com/</code></p></li><li><p>创建项目</p><p>项目名和用户名，还有范围地址中的最好是相同的，这个可以保证可以通过<code>&lt;用户名&gt;.gitee.io</code>进行访问，否则会多一级目录，我这里就填写<code>lmwings</code>,然后创建</p></li><li><p>到项目中，选择<code>服务--Gitee Pages</code>，部署分支选择<code>master</code>即可，部署目录可以不用填，启用以后会有网站地址，我的地址为<code>https://lmwings.gitee.io/blog</code></p></li><li><p>生成<code>ssh-key</code>公钥，这个和上面方法一样</p><pre class=" language-shell"><code class="language-shell"># Windows默认生成的路径$ cd /c/Users/Administrator/.ssh# 生成公钥文件，后面邮箱是我注册的邮箱地址，输入文件名为 coding即会生成 coding.pud文件$ ssh-keygen -t rsa -b 4096 -C 1321559220@qq.comGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): rsa_gitee</code></pre><p>然后把<code>rsa_gitee.pub</code>填写到</p><p><code>https://gitee.com/profile/sshkeys</code> （我自己使用一般直接设置账号的，不设置仓库的）</p><p>测试一下是否正常</p><pre class=" language-shell"><code class="language-shell">ssh -T git@gitee.com</code></pre></li><li><p>部署更新后，到<code>gitee Pages</code>手动更新一下</p><p><strong>付费版本<code>gitee Pages Pro</code>，可以支持自定义域名，支持推送后自动部署，普通不行</strong></p></li><li><p>访问一下</p><p><code>https://lmwings.gitee.io/</code></p></li></ol><p><strong>部署到<code>gitlab</code></strong></p><ol><li><p>申请<code>gitlab</code>账号</p><p><code>https://gitlab.com/</code></p></li><li><p>创建项目， 名称规则同<code>github</code>， 即 <code>&lt;用户名&gt;.gitlab.io</code></p></li><li><p>生成<code>ssh-key</code>公钥，方法一样</p><pre class=" language-shell"><code class="language-shell"># Windows默认生成的路径$ cd /c/Users/Administrator/.ssh$ ssh-keygen -t rsa -C 1321559220@qq.comGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): rsa_gitlab</code></pre><p>然后把<code>rsa_gitlab.pub</code>填写到</p><p><code>https://gitlab.com/profile/keys</code></p><p>测试一下是否正常</p><pre class=" language-shell"><code class="language-shell">ssh -T git@gitlab.com</code></pre></li><li><p>这个和其他的不一样，</p><p>没有显示的<code>gitlab pages</code>设置界面，主要是<code>gitlab</code>有<code>gitlab ci</code>, 如果项目中存在<code>.gitlab-ci.yml</code>的文件，就会自动触发<code>gitlab runner</code>来执行这个脚本，所以和其他发布不一样，这个仓库中需要上传的是<code>本地的hexo源码</code></p></li><li><p><code>.gitlab-ci.yml</code>脚本编写可以参考</p><p>（暂时还未来得及验证。）</p><p><code>https://hexo.io/zh-cn/docs/gitlab-pages</code> </p><p><code>https://www.cnblogs.com/zhangnan35/p/10709252.html</code></p></li><li></li></ol><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>可以利用<code>Traivs CI</code>等持续集成平台进行部署</p><p>参考<code>https://hexo.io/zh-cn/docs/one-command-deployment</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 网站部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人的Hexo静态网站</title>
      <link href="/da-jian-ge-ren-hexo-wang-zhan.html"/>
      <url>/da-jian-ge-ren-hexo-wang-zhan.html</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人Hexo网站"><a href="#搭建个人Hexo网站" class="headerlink" title="搭建个人Hexo网站"></a>搭建个人<code>Hexo</code>网站</h1><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>需要依赖<code>node.js</code>环境，下载<code>node.js</code>安装包，安装好以后会自动安装<code>js</code>和<code>npm</code>环境.</p><p><strong>安装<code>nodejs</code></strong></p><p>下载<code>node.js安装包</code>，选择对应系统和版本，如果是<code>win7</code>，需要用<code>nodejs 12</code>的版本；</p><p>安装好以后需要重启下电脑，这样环境变量才能生效；</p><p>验证是否安装成功：</p><pre class=" language-shell"><code class="language-shell">node -vnpm -v</code></pre><p><strong>安装<code>hexo</code></strong></p><p>国外的源常常无法安装，需要配置成淘宝的源。注意从<code>2022.6.30</code>开始统一切换为<code>https://npmmirror.com/</code></p><pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.org</code></pre><p>然后安装</p><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><p>验证是否安装成功</p><pre class=" language-shell"><code class="language-shell">hexo -v</code></pre><p>建立本地目录</p><pre class=" language-shell"><code class="language-shell">hexo init <folder>cd <folder>npm install</code></pre><h2 id="2-安装合适的模板"><a href="#2-安装合适的模板" class="headerlink" title="2. 安装合适的模板"></a>2. 安装合适的模板</h2><p>我这里选用的是<code>hexo-theme-matery</code></p><pre class=" language-shell"><code class="language-shell">git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p>其他说明见说明文档<code>https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</code></p><h2 id="3-修改及问题"><a href="#3-修改及问题" class="headerlink" title="3. 修改及问题"></a>3. 修改及问题</h2><ol><li><p>修改</p><p>替换模板到<code>hexo</code>源码目录，修改成<code>hexo-theme-matery</code>这个模板</p><p>新建分类<code>categories</code>页</p><pre class=" language-shell"><code class="language-shell">hexo new page "categories"</code></pre><p>编辑<code>/source/categories/index.md</code>，修改内容为</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>title<span class="token punctuation">:</span> categoriesdate<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">07</span>type<span class="token punctuation">:</span> <span class="token string">"categories"</span>layout<span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><p>同理，新建标签<code>tags</code>页，新建关于我<code>about</code>页，新建留言板<code>contact</code>页，新建友情链接<code>friends</code>页</p></li><li><p>插件安装</p><p><strong>代码高亮</strong></p><pre class=" language-python"><code class="language-python">npm i <span class="token operator">-</span>S hexo<span class="token operator">-</span>prism<span class="token operator">-</span>plugin</code></pre><p>然后修改根目录的<code>_config.yml</code>文件中的<code>highlight.enable</code>为<code>false</code>，并新增<code>prism</code>插件相关设置</p><pre class=" language-json"><code class="language-json">highlight<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">false</span>prism_plugin<span class="token operator">:</span>  mode<span class="token operator">:</span> 'preprocess'    # realtime/preprocess  theme<span class="token operator">:</span> 'tomorrow'  line_number<span class="token operator">:</span> <span class="token boolean">false</span>    # default <span class="token boolean">false</span>  #custom_css<span class="token operator">:</span></code></pre><p><strong>搜索</strong></p><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-search --save</code></pre><p>新增配置项</p><pre class=" language-python"><code class="language-python">search<span class="token punctuation">:</span>  path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml  field<span class="token punctuation">:</span> post</code></pre><p><strong>中文链接转拼音</strong></p><pre class=" language-shell"><code class="language-shell">npm i hexo-permalink-pyinyin --save</code></pre><p>新增配置项</p><pre class=" language-python"><code class="language-python">permalink_pinyin<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> true  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><p><strong>文章字数统计</strong></p><pre class=" language-shell"><code class="language-shell">npm i --save hexo-wordcount</code></pre><p>修改主题下面的<code>_config.yml</code>文件，开启相关选项</p><pre class=" language-python"><code class="language-python">postInfo<span class="token punctuation">:</span>  date<span class="token punctuation">:</span> true  update<span class="token punctuation">:</span> false  wordCount<span class="token punctuation">:</span> false <span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  totalCount<span class="token punctuation">:</span> false <span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  min2read<span class="token punctuation">:</span> false <span class="token comment" spellcheck="true"># 阅读时长.</span>  readCount<span class="token punctuation">:</span> false <span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><p><strong>其他可选</strong></p><ul><li>添加<code>emoji</code>表情支持. <code>hexo-filter-github-emojis</code></li><li>添加<code>RSS</code>订阅支持. <code>hexo-generator-feed</code></li><li>添加<code>DaoVoice</code>在线聊天功能</li><li>添加<code>Tidio</code>在线聊天功能</li></ul></li><li><p>修改页脚</p><p>修改位置为主题文件的<code>/layout/_partial/footer.ejs</code>, 包括站点、使用的主题、访问量等。</p></li><li><p>修改社交链接</p><p>主题默认支持<code>qq</code>/<code>Github</code>/邮箱 等配置。可以在主题文件<code>/layout/_partial/social-link.ejs</code>文件中新增</p></li><li><p>修改打赏二维码图片</p><p>在主题文件的<code>source/medial/reward</code>中替换自己的</p></li><li><p>配置音乐播放器</p><p>在博客<code>source</code>目录下的<code>_data</code>下新建<code>musics.joson</code>文件，内容添加音乐</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><code>name</code>: 音乐名称</p><p><code>artist</code>: 音乐作者</p><p><code>url</code>： 音乐文件地址</p><p><code>cover</code>： 音乐封面</p></blockquote><p>然后在主题的<code>_config.yml</code>中开启 <code>music</code>下的 的<code>enable</code>即可</p></li><li></li></ol><h2 id="4-文章Front-matter介绍"><a href="#4-文章Front-matter介绍" class="headerlink" title="4. 文章Front-matter介绍"></a>4. 文章<code>Front-matter</code>介绍</h2><p>加密功能很好用</p><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code>中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code>中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>title<span class="token punctuation">:</span> typora<span class="token operator">-</span>vue<span class="token operator">-</span>theme主题介绍date<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>title<span class="token punctuation">:</span> typora<span class="token operator">-</span>vue<span class="token operator">-</span>theme主题介绍date<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">00</span>author<span class="token punctuation">:</span> 赵奇img<span class="token punctuation">:</span> <span class="token operator">/</span>source<span class="token operator">/</span>images<span class="token operator">/</span>xxx<span class="token punctuation">.</span>jpgtop<span class="token punctuation">:</span> truecover<span class="token punctuation">:</span> truecoverImg<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">1.</span>jpgpassword<span class="token punctuation">:</span> <span class="token number">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span>toc<span class="token punctuation">:</span> falsemathjax<span class="token punctuation">:</span> falsesummary<span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories<span class="token punctuation">:</span> Markdowntags<span class="token punctuation">:</span>  <span class="token operator">-</span> Typora  <span class="token operator">-</span> Markdown<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ol><li><p>我在<code>/source</code>下新建了<code>README.md</code>，主要是为了能在<code>github</code>项目界面中显示，而不希望被<code>hexo g</code>解析成<code>html</code>的，我要怎么设置？</p><p>在根目录下的<code>_config.yml</code>中, 设置<code>skip_render</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">category_dir</span><span class="token punctuation">:</span> categories<span class="token key atrule">code_dir</span><span class="token punctuation">:</span> downloads/code<span class="token key atrule">i18n_dir</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>lang<span class="token key atrule">skip_render</span><span class="token punctuation">:</span> README.md</code></pre></li><li><p>每次<code>hexo n 文章</code>，都只有名字，后面多了也不好找怎么办？</p><p>可以根目录的<code>_config.yml</code>中，设置<code>new_post_name</code>,添加上日期</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Writing</span><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year<span class="token punctuation">-</span><span class="token punctuation">:</span>month<span class="token punctuation">-</span><span class="token punctuation">:</span>day<span class="token punctuation">-</span><span class="token punctuation">:</span>title.md <span class="token comment" spellcheck="true"># File name of new posts</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post</code></pre></li><li><p>每次<code>hexo n 文章</code>，默认文章的头属性选项修改</p><p>在<code>hexo-source\scaffolds\post</code>中，修改默认样式</p><pre class=" language-shell"><code class="language-shell">---title: {{ title }}date: {{ date }}author: Wang Kangcomments: truetypes: categories:tags:---</code></pre></li><li><p><code>windows</code>中, 在<code>git bash</code>终端中<code>git status</code> 显示不了中文文件名,都是数字</p><p>主要是默认设置下,中文名显示的是八进制的字符编码. 只要把配置文件<code>core.quotepath</code>设置为<code>false</code>就可以解决</p><p>在<code>git bash</code>命令行中输入下面命令即可.</p><pre class=" language-shell"><code class="language-shell">git config --global core.quotepath false</code></pre></li></ol><ol start="5"><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
